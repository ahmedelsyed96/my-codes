
embeddedlab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001444  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c6  00800060  00001444  000014d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800126  00800126  0000159e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000159e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017f0  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a62  00000000  00000000  00002f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d2b  00000000  00000000  000039a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  000046d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053c  00000000  00000000  00004a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ddb  00000000  00000000  00004f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00005d77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3b 02 	jmp	0x476	; 0x476 <__vector_1>
       8:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 32       	cpi	r26, 0x26	; 38
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a6 e2       	ldi	r26, 0x26	; 38
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 33       	cpi	r26, 0x30	; 48
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 09 03 	call	0x612	; 0x612 <main>
      8a:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Genpulse>:


//======================================pulse generation=============================================================
void Genpulse()
{
	SETBIT(PORTB,EN);
      92:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      94:	8f ec       	ldi	r24, 0xCF	; 207
      96:	97 e0       	ldi	r25, 0x07	; 7
      98:	01 97       	sbiw	r24, 0x01	; 1
      9a:	f1 f7       	brne	.-4      	; 0x98 <Genpulse+0x6>
      9c:	00 c0       	rjmp	.+0      	; 0x9e <Genpulse+0xc>
      9e:	00 00       	nop
	_delay_ms(1);
	CLRBIT(PORTB,EN);
      a0:	c0 98       	cbi	0x18, 0	; 24
      a2:	8f ec       	ldi	r24, 0xCF	; 207
      a4:	97 e0       	ldi	r25, 0x07	; 7
      a6:	01 97       	sbiw	r24, 0x01	; 1
      a8:	f1 f7       	brne	.-4      	; 0xa6 <Genpulse+0x14>
      aa:	00 c0       	rjmp	.+0      	; 0xac <Genpulse+0x1a>
      ac:	00 00       	nop
      ae:	08 95       	ret

000000b0 <Lcdwritecmd>:
	#endif
}

// send command
void Lcdwritecmd(unsigned char cmd)
{
      b0:	cf 93       	push	r28
      b2:	c8 2f       	mov	r28, r24
	CLRBIT(PORTB,RS);
	PORTA=cmd;
	Genpulse();
	
	#else 
	CLRBIT(PORTB,RS);
      b4:	c2 98       	cbi	0x18, 2	; 24
	// clear the 4 MSB
	for (int i=4; i<8 ; i++)
      b6:	84 e0       	ldi	r24, 0x04	; 4
      b8:	90 e0       	ldi	r25, 0x00	; 0
	{
		CLRBIT(PORTA,i);
      ba:	61 e0       	ldi	r22, 0x01	; 1
      bc:	70 e0       	ldi	r23, 0x00	; 0
      be:	3b b3       	in	r19, 0x1b	; 27
      c0:	ab 01       	movw	r20, r22
      c2:	08 2e       	mov	r0, r24
      c4:	02 c0       	rjmp	.+4      	; 0xca <Lcdwritecmd+0x1a>
      c6:	44 0f       	add	r20, r20
      c8:	55 1f       	adc	r21, r21
      ca:	0a 94       	dec	r0
      cc:	e2 f7       	brpl	.-8      	; 0xc6 <Lcdwritecmd+0x16>
      ce:	24 2f       	mov	r18, r20
      d0:	20 95       	com	r18
      d2:	23 23       	and	r18, r19
      d4:	2b bb       	out	0x1b, r18	; 27
	Genpulse();
	
	#else 
	CLRBIT(PORTB,RS);
	// clear the 4 MSB
	for (int i=4; i<8 ; i++)
      d6:	01 96       	adiw	r24, 0x01	; 1
      d8:	88 30       	cpi	r24, 0x08	; 8
      da:	91 05       	cpc	r25, r1
      dc:	81 f7       	brne	.-32     	; 0xbe <Lcdwritecmd+0xe>
	{
		CLRBIT(PORTA,i);
	}
	PORTA|=(cmd&0xf0);
      de:	8b b3       	in	r24, 0x1b	; 27
      e0:	9c 2f       	mov	r25, r28
      e2:	90 7f       	andi	r25, 0xF0	; 240
      e4:	89 2b       	or	r24, r25
      e6:	8b bb       	out	0x1b, r24	; 27
	Genpulse();
      e8:	0e 94 49 00 	call	0x92	; 0x92 <Genpulse>
	//clear 4 MSB
	for(int i=4;i<8;i++)
      ec:	84 e0       	ldi	r24, 0x04	; 4
      ee:	90 e0       	ldi	r25, 0x00	; 0
	{
		CLRBIT(PORTA,i);
      f0:	61 e0       	ldi	r22, 0x01	; 1
      f2:	70 e0       	ldi	r23, 0x00	; 0
      f4:	3b b3       	in	r19, 0x1b	; 27
      f6:	ab 01       	movw	r20, r22
      f8:	08 2e       	mov	r0, r24
      fa:	02 c0       	rjmp	.+4      	; 0x100 <Lcdwritecmd+0x50>
      fc:	44 0f       	add	r20, r20
      fe:	55 1f       	adc	r21, r21
     100:	0a 94       	dec	r0
     102:	e2 f7       	brpl	.-8      	; 0xfc <Lcdwritecmd+0x4c>
     104:	24 2f       	mov	r18, r20
     106:	20 95       	com	r18
     108:	23 23       	and	r18, r19
     10a:	2b bb       	out	0x1b, r18	; 27
		CLRBIT(PORTA,i);
	}
	PORTA|=(cmd&0xf0);
	Genpulse();
	//clear 4 MSB
	for(int i=4;i<8;i++)
     10c:	01 96       	adiw	r24, 0x01	; 1
     10e:	88 30       	cpi	r24, 0x08	; 8
     110:	91 05       	cpc	r25, r1
     112:	81 f7       	brne	.-32     	; 0xf4 <Lcdwritecmd+0x44>
	{
		CLRBIT(PORTA,i);
	}
	//shifting the LSB to the  MSB
	PORTA|=((cmd&0x0f)<<4);
     114:	2b b3       	in	r18, 0x1b	; 27
     116:	30 e1       	ldi	r19, 0x10	; 16
     118:	c3 9f       	mul	r28, r19
     11a:	c0 01       	movw	r24, r0
     11c:	11 24       	eor	r1, r1
     11e:	82 2b       	or	r24, r18
     120:	8b bb       	out	0x1b, r24	; 27
	Genpulse(); 
     122:	0e 94 49 00 	call	0x92	; 0x92 <Genpulse>
	#endif	
}
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <LcdInit>:
	Lcdwritecmd(0x0C);  // show cursor
  #else
	//set DIR of PORTD as output
	for(int i=4;i<8;i++)
	{
		SETBIT(DDRA,i);
     12a:	d4 9a       	sbi	0x1a, 4	; 26
     12c:	d5 9a       	sbi	0x1a, 5	; 26
     12e:	d6 9a       	sbi	0x1a, 6	; 26
     130:	d7 9a       	sbi	0x1a, 7	; 26
	}
	PORTA&=0x0F;
     132:	8b b3       	in	r24, 0x1b	; 27
     134:	8f 70       	andi	r24, 0x0F	; 15
     136:	8b bb       	out	0x1b, r24	; 27
	SETBIT(DDRB,RS);
     138:	ba 9a       	sbi	0x17, 2	; 23
	SETBIT(DDRB,EN);
     13a:	b8 9a       	sbi	0x17, 0	; 23
	SETBIT(DDRB,RW);
     13c:	b9 9a       	sbi	0x17, 1	; 23
	//LCD is in write mode
	CLRBIT(PORTB,RW);
     13e:	c1 98       	cbi	0x18, 1	; 24
	Lcdwritecmd(0x02); //back to home
     140:	82 e0       	ldi	r24, 0x02	; 2
     142:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
	Lcdwritecmd(0x28); //4bit mode
     146:	88 e2       	ldi	r24, 0x28	; 40
     148:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
	Lcdwritecmd(0x01);  // clear LCD
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
	Lcdwritecmd(0x0C);  // show cursor
     152:	8c e0       	ldi	r24, 0x0C	; 12
     154:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
	NEWLINE_1ST_ROW;
     158:	80 e8       	ldi	r24, 0x80	; 128
     15a:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
	Lcdwritecmd(0x06);  // increment cursor right
     15e:	86 e0       	ldi	r24, 0x06	; 6
     160:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
     164:	8f e3       	ldi	r24, 0x3F	; 63
     166:	9c e9       	ldi	r25, 0x9C	; 156
     168:	01 97       	sbiw	r24, 0x01	; 1
     16a:	f1 f7       	brne	.-4      	; 0x168 <LcdInit+0x3e>
     16c:	00 c0       	rjmp	.+0      	; 0x16e <LcdInit+0x44>
     16e:	00 00       	nop
     170:	08 95       	ret

00000172 <Lcdwritedata>:
	#endif	
}

//send data
void Lcdwritedata(unsigned char data)
{
     172:	cf 93       	push	r28
     174:	c8 2f       	mov	r28, r24
	SETBIT(PORTB,RS);
	PORTA=data;
	Genpulse();
	#else 
	
	SETBIT(PORTB,RS);
     176:	c2 9a       	sbi	0x18, 2	; 24
	// clear the 4 MSB
	for (int i=4; i<8 ; i++)
     178:	84 e0       	ldi	r24, 0x04	; 4
     17a:	90 e0       	ldi	r25, 0x00	; 0
	{
		CLRBIT(PORTA,i);
     17c:	61 e0       	ldi	r22, 0x01	; 1
     17e:	70 e0       	ldi	r23, 0x00	; 0
     180:	3b b3       	in	r19, 0x1b	; 27
     182:	ab 01       	movw	r20, r22
     184:	08 2e       	mov	r0, r24
     186:	02 c0       	rjmp	.+4      	; 0x18c <Lcdwritedata+0x1a>
     188:	44 0f       	add	r20, r20
     18a:	55 1f       	adc	r21, r21
     18c:	0a 94       	dec	r0
     18e:	e2 f7       	brpl	.-8      	; 0x188 <Lcdwritedata+0x16>
     190:	24 2f       	mov	r18, r20
     192:	20 95       	com	r18
     194:	23 23       	and	r18, r19
     196:	2b bb       	out	0x1b, r18	; 27
	Genpulse();
	#else 
	
	SETBIT(PORTB,RS);
	// clear the 4 MSB
	for (int i=4; i<8 ; i++)
     198:	01 96       	adiw	r24, 0x01	; 1
     19a:	88 30       	cpi	r24, 0x08	; 8
     19c:	91 05       	cpc	r25, r1
     19e:	81 f7       	brne	.-32     	; 0x180 <Lcdwritedata+0xe>
	{
		CLRBIT(PORTA,i);
	}
	PORTA|=(data&0xf0);
     1a0:	8b b3       	in	r24, 0x1b	; 27
     1a2:	9c 2f       	mov	r25, r28
     1a4:	90 7f       	andi	r25, 0xF0	; 240
     1a6:	89 2b       	or	r24, r25
     1a8:	8b bb       	out	0x1b, r24	; 27
	Genpulse();
     1aa:	0e 94 49 00 	call	0x92	; 0x92 <Genpulse>
	//clear 4 MSB
	for(int i=4;i<8;i++)
     1ae:	84 e0       	ldi	r24, 0x04	; 4
     1b0:	90 e0       	ldi	r25, 0x00	; 0
	{
		CLRBIT(PORTA,i);
     1b2:	61 e0       	ldi	r22, 0x01	; 1
     1b4:	70 e0       	ldi	r23, 0x00	; 0
     1b6:	3b b3       	in	r19, 0x1b	; 27
     1b8:	ab 01       	movw	r20, r22
     1ba:	08 2e       	mov	r0, r24
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <Lcdwritedata+0x50>
     1be:	44 0f       	add	r20, r20
     1c0:	55 1f       	adc	r21, r21
     1c2:	0a 94       	dec	r0
     1c4:	e2 f7       	brpl	.-8      	; 0x1be <Lcdwritedata+0x4c>
     1c6:	24 2f       	mov	r18, r20
     1c8:	20 95       	com	r18
     1ca:	23 23       	and	r18, r19
     1cc:	2b bb       	out	0x1b, r18	; 27
		CLRBIT(PORTA,i);
	}
	PORTA|=(data&0xf0);
	Genpulse();
	//clear 4 MSB
	for(int i=4;i<8;i++)
     1ce:	01 96       	adiw	r24, 0x01	; 1
     1d0:	88 30       	cpi	r24, 0x08	; 8
     1d2:	91 05       	cpc	r25, r1
     1d4:	81 f7       	brne	.-32     	; 0x1b6 <Lcdwritedata+0x44>
	{
		CLRBIT(PORTA,i);
	}
	//shifting the LSB to the  MSB
	PORTA|=((data&0x0f)<<4);
     1d6:	2b b3       	in	r18, 0x1b	; 27
     1d8:	30 e1       	ldi	r19, 0x10	; 16
     1da:	c3 9f       	mul	r28, r19
     1dc:	c0 01       	movw	r24, r0
     1de:	11 24       	eor	r1, r1
     1e0:	82 2b       	or	r24, r18
     1e2:	8b bb       	out	0x1b, r24	; 27
	Genpulse();
     1e4:	0e 94 49 00 	call	0x92	; 0x92 <Genpulse>
	#endif
}
     1e8:	cf 91       	pop	r28
     1ea:	08 95       	ret

000001ec <Lcdprintf>:


//LCD write string

void Lcdprintf(unsigned char* str)
{
     1ec:	ef 92       	push	r14
     1ee:	ff 92       	push	r15
     1f0:	0f 93       	push	r16
     1f2:	1f 93       	push	r17
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	8c 01       	movw	r16, r24
     1fa:	7c 01       	movw	r14, r24
	int i;
 	for(i=0;i<strlen((const char*)str);i++)
     1fc:	c0 e0       	ldi	r28, 0x00	; 0
     1fe:	d0 e0       	ldi	r29, 0x00	; 0
     200:	06 c0       	rjmp	.+12     	; 0x20e <Lcdprintf+0x22>
	 {
		 Lcdwritedata(str[i]);
     202:	f7 01       	movw	r30, r14
     204:	81 91       	ld	r24, Z+
     206:	7f 01       	movw	r14, r30
     208:	0e 94 b9 00 	call	0x172	; 0x172 <Lcdwritedata>
//LCD write string

void Lcdprintf(unsigned char* str)
{
	int i;
 	for(i=0;i<strlen((const char*)str);i++)
     20c:	21 96       	adiw	r28, 0x01	; 1
     20e:	f8 01       	movw	r30, r16
     210:	01 90       	ld	r0, Z+
     212:	00 20       	and	r0, r0
     214:	e9 f7       	brne	.-6      	; 0x210 <Lcdprintf+0x24>
     216:	31 97       	sbiw	r30, 0x01	; 1
     218:	e0 1b       	sub	r30, r16
     21a:	f1 0b       	sbc	r31, r17
     21c:	ce 17       	cp	r28, r30
     21e:	df 07       	cpc	r29, r31
     220:	80 f3       	brcs	.-32     	; 0x202 <Lcdprintf+0x16>
	 {
		 Lcdwritedata(str[i]);
	 }
}
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	1f 91       	pop	r17
     228:	0f 91       	pop	r16
     22a:	ff 90       	pop	r15
     22c:	ef 90       	pop	r14
     22e:	08 95       	ret

00000230 <KeyPad_Init>:
//====================================KEYPAD 4*4============================================

void KeyPad_Init()
{
	//make first 4 bits in REG-C As out put
	DDRC|=0xf0; // pc7,Pc6,Pc5 ,Pc4   1111 0000
     230:	84 b3       	in	r24, 0x14	; 20
     232:	80 6f       	ori	r24, 0xF0	; 240
     234:	84 bb       	out	0x14, r24	; 20
	//enable pull up
	PORTC|=0x0f;
     236:	85 b3       	in	r24, 0x15	; 21
     238:	8f 60       	ori	r24, 0x0F	; 15
     23a:	85 bb       	out	0x15, r24	; 21
     23c:	08 95       	ret

0000023e <Get_Key>:
}

//read from keypad
unsigned char Get_Key()
{
     23e:	ef 92       	push	r14
     240:	ff 92       	push	r15
     242:	0f 93       	push	r16
     244:	1f 93       	push	r17
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
	while(1)
	{
		PORTC|=0xf0;
		for(int i=PC4;i<=PC7;i++)
		{
			CLRBIT(PORTC,i);
     24a:	ee 24       	eor	r14, r14
     24c:	e3 94       	inc	r14
     24e:	f1 2c       	mov	r15, r1
unsigned char Get_Key()
{

	while(1)
	{
		PORTC|=0xf0;
     250:	85 b3       	in	r24, 0x15	; 21
     252:	80 6f       	ori	r24, 0xF0	; 240
     254:	85 bb       	out	0x15, r24	; 21
		for(int i=PC4;i<=PC7;i++)
     256:	04 e0       	ldi	r16, 0x04	; 4
     258:	10 e0       	ldi	r17, 0x00	; 0
		{
			CLRBIT(PORTC,i);
     25a:	85 b3       	in	r24, 0x15	; 21
     25c:	e7 01       	movw	r28, r14
     25e:	00 2e       	mov	r0, r16
     260:	02 c0       	rjmp	.+4      	; 0x266 <Get_Key+0x28>
     262:	cc 0f       	add	r28, r28
     264:	dd 1f       	adc	r29, r29
     266:	0a 94       	dec	r0
     268:	e2 f7       	brpl	.-8      	; 0x262 <Get_Key+0x24>
     26a:	9c 2f       	mov	r25, r28
     26c:	90 95       	com	r25
     26e:	89 23       	and	r24, r25
     270:	85 bb       	out	0x15, r24	; 21
			unsigned char state;
			state =(PORTC&0xf0);
     272:	85 b3       	in	r24, 0x15	; 21
		//	1011 0000=
		//	1111 0000
		//	1011 0000
		//	0x e 0
			switch (state)
     274:	80 7f       	andi	r24, 0xF0	; 240
     276:	80 3b       	cpi	r24, 0xB0	; 176
     278:	09 f4       	brne	.+2      	; 0x27c <Get_Key+0x3e>
     27a:	7c c0       	rjmp	.+248    	; 0x374 <Get_Key+0x136>
     27c:	20 f4       	brcc	.+8      	; 0x286 <Get_Key+0x48>
     27e:	80 37       	cpi	r24, 0x70	; 112
     280:	09 f4       	brne	.+2      	; 0x284 <Get_Key+0x46>
     282:	b0 c0       	rjmp	.+352    	; 0x3e4 <Get_Key+0x1a6>
     284:	e7 c0       	rjmp	.+462    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     286:	80 3d       	cpi	r24, 0xD0	; 208
     288:	e9 f1       	breq	.+122    	; 0x304 <Get_Key+0xc6>
     28a:	80 3e       	cpi	r24, 0xE0	; 224
     28c:	09 f0       	breq	.+2      	; 0x290 <Get_Key+0x52>
     28e:	e2 c0       	rjmp	.+452    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			{
				case 0xe0:
				if(readbit(PINC,PINC0)==0)
     290:	83 b3       	in	r24, 0x13	; 19
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     298:	81 11       	cpse	r24, r1
     29a:	08 c0       	rjmp	.+16     	; 0x2ac <Get_Key+0x6e>
				{
					while(readbit(PINC,PINC0)==0);
     29c:	83 b3       	in	r24, 0x13	; 19
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     2a4:	88 23       	and	r24, r24
     2a6:	d1 f3       	breq	.-12     	; 0x29c <Get_Key+0x5e>
					return '7';
     2a8:	87 e3       	ldi	r24, 0x37	; 55
     2aa:	de c0       	rjmp	.+444    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
				}
				else if(readbit(PINC,PINC1)==0)
     2ac:	83 b3       	in	r24, 0x13	; 19
     2ae:	61 e0       	ldi	r22, 0x01	; 1
     2b0:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     2b4:	81 11       	cpse	r24, r1
     2b6:	08 c0       	rjmp	.+16     	; 0x2c8 <Get_Key+0x8a>
				{
					while(readbit(PINC,PINC1)==0);
     2b8:	83 b3       	in	r24, 0x13	; 19
     2ba:	61 e0       	ldi	r22, 0x01	; 1
     2bc:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     2c0:	88 23       	and	r24, r24
     2c2:	d1 f3       	breq	.-12     	; 0x2b8 <Get_Key+0x7a>
					return '4';
     2c4:	84 e3       	ldi	r24, 0x34	; 52
     2c6:	d0 c0       	rjmp	.+416    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
				}
				else if(readbit(PINC,PINC2)==0)
     2c8:	83 b3       	in	r24, 0x13	; 19
     2ca:	62 e0       	ldi	r22, 0x02	; 2
     2cc:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     2d0:	81 11       	cpse	r24, r1
     2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <Get_Key+0xa6>
				{
					while(readbit(PINC,PINC2)==0);
     2d4:	83 b3       	in	r24, 0x13	; 19
     2d6:	62 e0       	ldi	r22, 0x02	; 2
     2d8:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     2dc:	88 23       	and	r24, r24
     2de:	d1 f3       	breq	.-12     	; 0x2d4 <Get_Key+0x96>
					return '1';
     2e0:	81 e3       	ldi	r24, 0x31	; 49
     2e2:	c2 c0       	rjmp	.+388    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>

				}
				else if(readbit(PINC,PINC3)==0)
     2e4:	83 b3       	in	r24, 0x13	; 19
     2e6:	63 e0       	ldi	r22, 0x03	; 3
     2e8:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     2ec:	81 11       	cpse	r24, r1
     2ee:	b2 c0       	rjmp	.+356    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
				{
					while(readbit(PINC,PINC3)==0);
     2f0:	83 b3       	in	r24, 0x13	; 19
     2f2:	63 e0       	ldi	r22, 0x03	; 3
     2f4:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     2f8:	88 23       	and	r24, r24
     2fa:	d1 f3       	breq	.-12     	; 0x2f0 <Get_Key+0xb2>
					 CLEAR;
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
     302:	a8 c0       	rjmp	.+336    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
				}

				break;
				case 0xd0:

				if(readbit(PINC,PINC0)==0)
     304:	83 b3       	in	r24, 0x13	; 19
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     30c:	81 11       	cpse	r24, r1
     30e:	08 c0       	rjmp	.+16     	; 0x320 <Get_Key+0xe2>
				{
					while(readbit(PINC,PINC0)==0);
     310:	83 b3       	in	r24, 0x13	; 19
     312:	60 e0       	ldi	r22, 0x00	; 0
     314:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     318:	88 23       	and	r24, r24
     31a:	d1 f3       	breq	.-12     	; 0x310 <Get_Key+0xd2>
					return '8';
     31c:	88 e3       	ldi	r24, 0x38	; 56
     31e:	a4 c0       	rjmp	.+328    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
				}
				else if(readbit(PINC,PINC1)==0)
     320:	83 b3       	in	r24, 0x13	; 19
     322:	61 e0       	ldi	r22, 0x01	; 1
     324:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     328:	81 11       	cpse	r24, r1
     32a:	08 c0       	rjmp	.+16     	; 0x33c <Get_Key+0xfe>
				{
					while(readbit(PINC,PINC1)==0);
     32c:	83 b3       	in	r24, 0x13	; 19
     32e:	61 e0       	ldi	r22, 0x01	; 1
     330:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     334:	88 23       	and	r24, r24
     336:	d1 f3       	breq	.-12     	; 0x32c <Get_Key+0xee>
					return '5';
     338:	85 e3       	ldi	r24, 0x35	; 53
     33a:	96 c0       	rjmp	.+300    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
				}
				else if(readbit(PINC,PINC2)==0)
     33c:	83 b3       	in	r24, 0x13	; 19
     33e:	62 e0       	ldi	r22, 0x02	; 2
     340:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     344:	81 11       	cpse	r24, r1
     346:	08 c0       	rjmp	.+16     	; 0x358 <Get_Key+0x11a>
				{
					while(readbit(PINC,PINC2)==0);
     348:	83 b3       	in	r24, 0x13	; 19
     34a:	62 e0       	ldi	r22, 0x02	; 2
     34c:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     350:	88 23       	and	r24, r24
     352:	d1 f3       	breq	.-12     	; 0x348 <Get_Key+0x10a>
					return '2';
     354:	82 e3       	ldi	r24, 0x32	; 50
     356:	88 c0       	rjmp	.+272    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>

				}
				else if(readbit(PINC,PINC3)==0)
     358:	83 b3       	in	r24, 0x13	; 19
     35a:	63 e0       	ldi	r22, 0x03	; 3
     35c:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     360:	81 11       	cpse	r24, r1
     362:	78 c0       	rjmp	.+240    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
				{
					while(readbit(PINC,PINC3)==0);
     364:	83 b3       	in	r24, 0x13	; 19
     366:	63 e0       	ldi	r22, 0x03	; 3
     368:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     36c:	88 23       	and	r24, r24
     36e:	d1 f3       	breq	.-12     	; 0x364 <Get_Key+0x126>
					return '0';
     370:	80 e3       	ldi	r24, 0x30	; 48
     372:	7a c0       	rjmp	.+244    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>

				case 0xb0:
				// 1011 0000
				//0x b 0

				if(readbit(PINC,PINC0)==0)
     374:	83 b3       	in	r24, 0x13	; 19
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     37c:	81 11       	cpse	r24, r1
     37e:	08 c0       	rjmp	.+16     	; 0x390 <Get_Key+0x152>
				{
					while(readbit(PINC,PINC0)==0);
     380:	83 b3       	in	r24, 0x13	; 19
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     388:	88 23       	and	r24, r24
     38a:	d1 f3       	breq	.-12     	; 0x380 <Get_Key+0x142>
					return '9';
     38c:	89 e3       	ldi	r24, 0x39	; 57
     38e:	6c c0       	rjmp	.+216    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
				}
				else if(readbit(PINC,PINC1)==0)
     390:	83 b3       	in	r24, 0x13	; 19
     392:	61 e0       	ldi	r22, 0x01	; 1
     394:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     398:	81 11       	cpse	r24, r1
     39a:	08 c0       	rjmp	.+16     	; 0x3ac <Get_Key+0x16e>
				{
					while(readbit(PINC,PINC1)==0);
     39c:	83 b3       	in	r24, 0x13	; 19
     39e:	61 e0       	ldi	r22, 0x01	; 1
     3a0:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     3a4:	88 23       	and	r24, r24
     3a6:	d1 f3       	breq	.-12     	; 0x39c <Get_Key+0x15e>
					return '6';
     3a8:	86 e3       	ldi	r24, 0x36	; 54
     3aa:	5e c0       	rjmp	.+188    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
				}
				else if(readbit(PINC,PINC2)==0)
     3ac:	83 b3       	in	r24, 0x13	; 19
     3ae:	62 e0       	ldi	r22, 0x02	; 2
     3b0:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     3b4:	81 11       	cpse	r24, r1
     3b6:	08 c0       	rjmp	.+16     	; 0x3c8 <Get_Key+0x18a>
				{
					while(readbit(PINC,PINC2)==0);
     3b8:	83 b3       	in	r24, 0x13	; 19
     3ba:	62 e0       	ldi	r22, 0x02	; 2
     3bc:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     3c0:	88 23       	and	r24, r24
     3c2:	d1 f3       	breq	.-12     	; 0x3b8 <Get_Key+0x17a>
					return '3';
     3c4:	83 e3       	ldi	r24, 0x33	; 51
     3c6:	50 c0       	rjmp	.+160    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>

				}
				else if(readbit(PINC,PINC3)==0)
     3c8:	83 b3       	in	r24, 0x13	; 19
     3ca:	63 e0       	ldi	r22, 0x03	; 3
     3cc:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     3d0:	81 11       	cpse	r24, r1
     3d2:	40 c0       	rjmp	.+128    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
				{
					while(readbit(PINC,PINC3)==0);
     3d4:	83 b3       	in	r24, 0x13	; 19
     3d6:	63 e0       	ldi	r22, 0x03	; 3
     3d8:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     3dc:	88 23       	and	r24, r24
     3de:	d1 f3       	breq	.-12     	; 0x3d4 <Get_Key+0x196>
					return '=';
     3e0:	8d e3       	ldi	r24, 0x3D	; 61
     3e2:	42 c0       	rjmp	.+132    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
				break;
				case 0x70:
				// 0111 0000
				//0x 7 0

				if(readbit(PINC,PINC0)==0)
     3e4:	83 b3       	in	r24, 0x13	; 19
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     3ec:	81 11       	cpse	r24, r1
     3ee:	08 c0       	rjmp	.+16     	; 0x400 <__LOCK_REGION_LENGTH__>
				{
					while(readbit(PINC,PINC0)==0);
     3f0:	83 b3       	in	r24, 0x13	; 19
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     3f8:	88 23       	and	r24, r24
     3fa:	d1 f3       	breq	.-12     	; 0x3f0 <Get_Key+0x1b2>
					return '/';
     3fc:	8f e2       	ldi	r24, 0x2F	; 47
     3fe:	34 c0       	rjmp	.+104    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
				}
				else if(readbit(PINC,PINC1)==0)
     400:	83 b3       	in	r24, 0x13	; 19
     402:	61 e0       	ldi	r22, 0x01	; 1
     404:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     408:	81 11       	cpse	r24, r1
     40a:	08 c0       	rjmp	.+16     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
				{
					while(readbit(PINC,PINC1)==0);
     40c:	83 b3       	in	r24, 0x13	; 19
     40e:	61 e0       	ldi	r22, 0x01	; 1
     410:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     414:	88 23       	and	r24, r24
     416:	d1 f3       	breq	.-12     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
					return '*';
     418:	8a e2       	ldi	r24, 0x2A	; 42
     41a:	26 c0       	rjmp	.+76     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
				}
				else if(readbit(PINC,PINC2)==0)
     41c:	83 b3       	in	r24, 0x13	; 19
     41e:	62 e0       	ldi	r22, 0x02	; 2
     420:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     424:	81 11       	cpse	r24, r1
     426:	08 c0       	rjmp	.+16     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
				{
					while(readbit(PINC,PINC2)==0);
     428:	83 b3       	in	r24, 0x13	; 19
     42a:	62 e0       	ldi	r22, 0x02	; 2
     42c:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     430:	88 23       	and	r24, r24
     432:	d1 f3       	breq	.-12     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
					return '-';
     434:	8d e2       	ldi	r24, 0x2D	; 45
     436:	18 c0       	rjmp	.+48     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>

				}
				else if(readbit(PINC,PINC3)==0)
     438:	83 b3       	in	r24, 0x13	; 19
     43a:	63 e0       	ldi	r22, 0x03	; 3
     43c:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     440:	81 11       	cpse	r24, r1
     442:	08 c0       	rjmp	.+16     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
				{
					while(readbit(PINC,PINC3)==0);
     444:	83 b3       	in	r24, 0x13	; 19
     446:	63 e0       	ldi	r22, 0x03	; 3
     448:	0e 94 c3 03 	call	0x786	; 0x786 <readbit>
     44c:	88 23       	and	r24, r24
     44e:	d1 f3       	breq	.-12     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
					return '+';
     450:	8b e2       	ldi	r24, 0x2B	; 43
     452:	0a c0       	rjmp	.+20     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
				}

				break;

			}
			SETBIT(PORTC,i);
     454:	85 b3       	in	r24, 0x15	; 21
     456:	c8 2b       	or	r28, r24
     458:	c5 bb       	out	0x15, r28	; 21
{

	while(1)
	{
		PORTC|=0xf0;
		for(int i=PC4;i<=PC7;i++)
     45a:	0f 5f       	subi	r16, 0xFF	; 255
     45c:	1f 4f       	sbci	r17, 0xFF	; 255
     45e:	08 30       	cpi	r16, 0x08	; 8
     460:	11 05       	cpc	r17, r1
     462:	09 f0       	breq	.+2      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     464:	fa ce       	rjmp	.-524    	; 0x25a <Get_Key+0x1c>
     466:	f4 ce       	rjmp	.-536    	; 0x250 <Get_Key+0x12>
			}
			SETBIT(PORTC,i);
		}
	}
	return 0;
}
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	1f 91       	pop	r17
     46e:	0f 91       	pop	r16
     470:	ff 90       	pop	r15
     472:	ef 90       	pop	r14
     474:	08 95       	ret

00000476 <__vector_1>:
#include <HAL.h>
#define SAFE_PASSWORD 1


ISR(INT0_vect)
{
     476:	1f 92       	push	r1
     478:	0f 92       	push	r0
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	0f 92       	push	r0
     47e:	11 24       	eor	r1, r1
     480:	2f 93       	push	r18
     482:	3f 93       	push	r19
     484:	4f 93       	push	r20
     486:	5f 93       	push	r21
     488:	6f 93       	push	r22
     48a:	7f 93       	push	r23
     48c:	8f 93       	push	r24
     48e:	9f 93       	push	r25
     490:	af 93       	push	r26
     492:	bf 93       	push	r27
     494:	ef 93       	push	r30
     496:	ff 93       	push	r31
	CLEAR;
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
	Lcdprintf("FIRE ALARM");
     49e:	80 e6       	ldi	r24, 0x60	; 96
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Lcdprintf>
	SETBIT(DDRD,PD4);
     4a6:	8c 9a       	sbi	0x11, 4	; 17
	SETBIT(PORTD,PD4);
     4a8:	94 9a       	sbi	0x12, 4	; 18
     4aa:	2f ef       	ldi	r18, 0xFF	; 255
     4ac:	81 e1       	ldi	r24, 0x11	; 17
     4ae:	9a e7       	ldi	r25, 0x7A	; 122
     4b0:	21 50       	subi	r18, 0x01	; 1
     4b2:	80 40       	sbci	r24, 0x00	; 0
     4b4:	90 40       	sbci	r25, 0x00	; 0
     4b6:	e1 f7       	brne	.-8      	; 0x4b0 <__vector_1+0x3a>
     4b8:	00 c0       	rjmp	.+0      	; 0x4ba <__vector_1+0x44>
     4ba:	00 00       	nop
	_delay_ms(5000);
	CLRBIT(PORTD,PD4);
     4bc:	94 98       	cbi	0x12, 4	; 18
	CLEAR;
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
	
	
}
     4c4:	ff 91       	pop	r31
     4c6:	ef 91       	pop	r30
     4c8:	bf 91       	pop	r27
     4ca:	af 91       	pop	r26
     4cc:	9f 91       	pop	r25
     4ce:	8f 91       	pop	r24
     4d0:	7f 91       	pop	r23
     4d2:	6f 91       	pop	r22
     4d4:	5f 91       	pop	r21
     4d6:	4f 91       	pop	r20
     4d8:	3f 91       	pop	r19
     4da:	2f 91       	pop	r18
     4dc:	0f 90       	pop	r0
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	0f 90       	pop	r0
     4e2:	1f 90       	pop	r1
     4e4:	18 95       	reti

000004e6 <__vector_16>:

ISR(ADC_vect)
{
     4e6:	1f 92       	push	r1
     4e8:	0f 92       	push	r0
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	0f 92       	push	r0
     4ee:	11 24       	eor	r1, r1
     4f0:	2f 93       	push	r18
     4f2:	3f 93       	push	r19
     4f4:	4f 93       	push	r20
     4f6:	5f 93       	push	r21
     4f8:	6f 93       	push	r22
     4fa:	7f 93       	push	r23
     4fc:	8f 93       	push	r24
     4fe:	9f 93       	push	r25
     500:	af 93       	push	r26
     502:	bf 93       	push	r27
     504:	ef 93       	push	r30
     506:	ff 93       	push	r31
	CLEAR;
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
	Lcdprintf(Read_analoge());
     50e:	0e 94 a5 04 	call	0x94a	; 0x94a <Read_analoge>
     512:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Lcdprintf>
	SETBIT(ADCSRA,ADSC);		
     516:	36 9a       	sbi	0x06, 6	; 6
}
     518:	ff 91       	pop	r31
     51a:	ef 91       	pop	r30
     51c:	bf 91       	pop	r27
     51e:	af 91       	pop	r26
     520:	9f 91       	pop	r25
     522:	8f 91       	pop	r24
     524:	7f 91       	pop	r23
     526:	6f 91       	pop	r22
     528:	5f 91       	pop	r21
     52a:	4f 91       	pop	r20
     52c:	3f 91       	pop	r19
     52e:	2f 91       	pop	r18
     530:	0f 90       	pop	r0
     532:	0f be       	out	0x3f, r0	; 63
     534:	0f 90       	pop	r0
     536:	1f 90       	pop	r1
     538:	18 95       	reti

0000053a <__vector_2>:


ISR(INT1_vect)
{
     53a:	1f 92       	push	r1
     53c:	0f 92       	push	r0
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	0f 92       	push	r0
     542:	11 24       	eor	r1, r1
     544:	ef 92       	push	r14
     546:	ff 92       	push	r15
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	2f 93       	push	r18
     54e:	3f 93       	push	r19
     550:	4f 93       	push	r20
     552:	5f 93       	push	r21
     554:	6f 93       	push	r22
     556:	7f 93       	push	r23
     558:	8f 93       	push	r24
     55a:	9f 93       	push	r25
     55c:	af 93       	push	r26
     55e:	bf 93       	push	r27
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	ef 93       	push	r30
     566:	ff 93       	push	r31
	SETBIT(ADCSRA,ADSC);
     568:	36 9a       	sbi	0x06, 6	; 6
	CLEAR;
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
	NEWLINE_1ST_ROW;
     570:	80 e8       	ldi	r24, 0x80	; 128
     572:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
	Lcdprintf("BRIGHTNESS");
     576:	8b e6       	ldi	r24, 0x6B	; 107
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Lcdprintf>
	unsigned short data = ADC;
     57e:	04 b1       	in	r16, 0x04	; 4
     580:	15 b1       	in	r17, 0x05	; 5
	for (int i= 0;i<100; i++)
     582:	e1 2c       	mov	r14, r1
     584:	f1 2c       	mov	r15, r1
     586:	01 c0       	rjmp	.+2      	; 0x58a <__vector_2+0x50>
     588:	8e 01       	movw	r16, r28
	{
		if (data != ADC)
     58a:	c4 b1       	in	r28, 0x04	; 4
     58c:	d5 b1       	in	r29, 0x05	; 5
     58e:	c0 17       	cp	r28, r16
     590:	d1 07       	cpc	r29, r17
     592:	69 f0       	breq	.+26     	; 0x5ae <__vector_2+0x74>
		{
			data = ADC;
     594:	04 b1       	in	r16, 0x04	; 4
     596:	15 b1       	in	r17, 0x05	; 5
			i = 0;
		}
		NEWLINE_2ND_ROW;
     598:	80 ec       	ldi	r24, 0xC0	; 192
     59a:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
		
		Lcdprintf(Read_analoge());
     59e:	0e 94 a5 04 	call	0x94a	; 0x94a <Read_analoge>
     5a2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Lcdprintf>
	SETBIT(ADCSRA,ADSC);
	CLEAR;
	NEWLINE_1ST_ROW;
	Lcdprintf("BRIGHTNESS");
	unsigned short data = ADC;
	for (int i= 0;i<100; i++)
     5a6:	ee 24       	eor	r14, r14
     5a8:	e3 94       	inc	r14
     5aa:	f1 2c       	mov	r15, r1
     5ac:	ee cf       	rjmp	.-36     	; 0x58a <__vector_2+0x50>
		if (data != ADC)
		{
			data = ADC;
			i = 0;
		}
		NEWLINE_2ND_ROW;
     5ae:	80 ec       	ldi	r24, 0xC0	; 192
     5b0:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
		
		Lcdprintf(Read_analoge());
     5b4:	0e 94 a5 04 	call	0x94a	; 0x94a <Read_analoge>
     5b8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Lcdprintf>
	SETBIT(ADCSRA,ADSC);
	CLEAR;
	NEWLINE_1ST_ROW;
	Lcdprintf("BRIGHTNESS");
	unsigned short data = ADC;
	for (int i= 0;i<100; i++)
     5bc:	8f ef       	ldi	r24, 0xFF	; 255
     5be:	e8 1a       	sub	r14, r24
     5c0:	f8 0a       	sbc	r15, r24
     5c2:	84 e6       	ldi	r24, 0x64	; 100
     5c4:	e8 16       	cp	r14, r24
     5c6:	f1 04       	cpc	r15, r1
     5c8:	fc f2       	brlt	.-66     	; 0x588 <__vector_2+0x4e>
		
		Lcdprintf(Read_analoge());
		
		
	}
	CLEAR;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
	NEWLINE_1ST_ROW;
     5d0:	80 e8       	ldi	r24, 0x80	; 128
     5d2:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
	Lcdprintf("Enter Password");
     5d6:	86 e7       	ldi	r24, 0x76	; 118
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Lcdprintf>
	NEWLINE_2ND_ROW;
     5de:	80 ec       	ldi	r24, 0xC0	; 192
     5e0:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
}
     5e4:	ff 91       	pop	r31
     5e6:	ef 91       	pop	r30
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	bf 91       	pop	r27
     5ee:	af 91       	pop	r26
     5f0:	9f 91       	pop	r25
     5f2:	8f 91       	pop	r24
     5f4:	7f 91       	pop	r23
     5f6:	6f 91       	pop	r22
     5f8:	5f 91       	pop	r21
     5fa:	4f 91       	pop	r20
     5fc:	3f 91       	pop	r19
     5fe:	2f 91       	pop	r18
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	ff 90       	pop	r15
     606:	ef 90       	pop	r14
     608:	0f 90       	pop	r0
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	0f 90       	pop	r0
     60e:	1f 90       	pop	r1
     610:	18 95       	reti

00000612 <main>:
int main(void)
{
    /* Replace with your application code */
	Timer_1_Init();
     612:	0e 94 bf 04 	call	0x97e	; 0x97e <Timer_1_Init>
	interruptInit();
     616:	0e 94 cb 03 	call	0x796	; 0x796 <interruptInit>
	ADC_INIT();
     61a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <ADC_INIT>
	//SETBIT(ADCSRA,ADSC);
	SPI_Master_init();
     61e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <SPI_Master_init>
	


	#if SAFE_PASSWORD
	//======================================================password=============================================================
	LcdInit();
     622:	0e 94 95 00 	call	0x12a	; 0x12a <LcdInit>
	KeyPad_Init();
     626:	0e 94 18 01 	call	0x230	; 0x230 <KeyPad_Init>
     62a:	c3 e0       	ldi	r28, 0x03	; 3
     62c:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char entered_password[4+1] = {'\0'};
	int j;
	
	for (int i=0;i<3;i++) //3 trials only
	{
		CLEAR;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
		NEWLINE_1ST_ROW;
     634:	80 e8       	ldi	r24, 0x80	; 128
     636:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
		Lcdprintf("Enter password");
     63a:	85 e8       	ldi	r24, 0x85	; 133
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Lcdprintf>
		NEWLINE_2ND_ROW;
     642:	80 ec       	ldi	r24, 0xC0	; 192
     644:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
     648:	04 e0       	ldi	r16, 0x04	; 4
     64a:	10 e0       	ldi	r17, 0x00	; 0
		for ( j=0;j<4;j++) // getting password
		{
			entered_password[j] = Get_Key();
     64c:	0e 94 1f 01 	call	0x23e	; 0x23e <Get_Key>
     650:	f8 2e       	mov	r15, r24
			Lcdprintf("*");  // to hide the output
     652:	84 e9       	ldi	r24, 0x94	; 148
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Lcdprintf>
			SPI_M_sendchar(entered_password[j]);
     65a:	8f 2d       	mov	r24, r15
     65c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <SPI_M_sendchar>
     660:	01 50       	subi	r16, 0x01	; 1
     662:	11 09       	sbc	r17, r1
	{
		CLEAR;
		NEWLINE_1ST_ROW;
		Lcdprintf("Enter password");
		NEWLINE_2ND_ROW;
		for ( j=0;j<4;j++) // getting password
     664:	99 f7       	brne	.-26     	; 0x64c <main+0x3a>
     666:	2f ef       	ldi	r18, 0xFF	; 255
     668:	80 e7       	ldi	r24, 0x70	; 112
     66a:	92 e0       	ldi	r25, 0x02	; 2
     66c:	21 50       	subi	r18, 0x01	; 1
     66e:	80 40       	sbci	r24, 0x00	; 0
     670:	90 40       	sbci	r25, 0x00	; 0
     672:	e1 f7       	brne	.-8      	; 0x66c <main+0x5a>
     674:	00 c0       	rjmp	.+0      	; 0x676 <main+0x64>
     676:	00 00       	nop
			SPI_M_sendchar(entered_password[j]);
		}
		//entered_password[j]='#';
		//SPI_M_sendstring(entered_password);
		_delay_ms(100);
		if (SPI_M_sendchar('#')=='1')
     678:	83 e2       	ldi	r24, 0x23	; 35
     67a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <SPI_M_sendchar>
     67e:	81 33       	cpi	r24, 0x31	; 49
     680:	a1 f4       	brne	.+40     	; 0x6aa <main+0x98>
		{
			CLEAR;
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
			NEWLINE_1ST_ROW;
     688:	80 e8       	ldi	r24, 0x80	; 128
     68a:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
			Lcdprintf("Correct password");
     68e:	86 e9       	ldi	r24, 0x96	; 150
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Lcdprintf>
     696:	2f ef       	ldi	r18, 0xFF	; 255
     698:	83 ed       	ldi	r24, 0xD3	; 211
     69a:	90 e3       	ldi	r25, 0x30	; 48
     69c:	21 50       	subi	r18, 0x01	; 1
     69e:	80 40       	sbci	r24, 0x00	; 0
     6a0:	90 40       	sbci	r25, 0x00	; 0
     6a2:	e1 f7       	brne	.-8      	; 0x69c <main+0x8a>
     6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <main+0x94>
     6a6:	00 00       	nop
     6a8:	28 c0       	rjmp	.+80     	; 0x6fa <main+0xe8>
			
			
		}
		else
		{
			NEWLINE_1ST_ROW;
     6aa:	80 e8       	ldi	r24, 0x80	; 128
     6ac:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
			Lcdprintf("Wrong password");
     6b0:	87 ea       	ldi	r24, 0xA7	; 167
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Lcdprintf>
     6b8:	2f ef       	ldi	r18, 0xFF	; 255
     6ba:	83 ed       	ldi	r24, 0xD3	; 211
     6bc:	90 e3       	ldi	r25, 0x30	; 48
     6be:	21 50       	subi	r18, 0x01	; 1
     6c0:	80 40       	sbci	r24, 0x00	; 0
     6c2:	90 40       	sbci	r25, 0x00	; 0
     6c4:	e1 f7       	brne	.-8      	; 0x6be <main+0xac>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <main+0xb6>
     6c8:	00 00       	nop
			_delay_ms(2000);
		}
		if (i==2)
     6ca:	c1 30       	cpi	r28, 0x01	; 1
     6cc:	d1 05       	cpc	r29, r1
     6ce:	91 f4       	brne	.+36     	; 0x6f4 <main+0xe2>
		{
					CLEAR;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
					NEWLINE_1ST_ROW;
     6d6:	80 e8       	ldi	r24, 0x80	; 128
     6d8:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
					Lcdprintf("3 times wrong");
     6dc:	86 eb       	ldi	r24, 0xB6	; 182
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Lcdprintf>
					NEWLINE_2ND_ROW;
     6e4:	80 ec       	ldi	r24, 0xC0	; 192
     6e6:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
					Lcdprintf("safe is locked");
     6ea:	84 ec       	ldi	r24, 0xC4	; 196
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Lcdprintf>
     6f2:	ff cf       	rjmp	.-2      	; 0x6f2 <main+0xe0>
     6f4:	21 97       	sbiw	r28, 0x01	; 1
	KeyPad_Init();
	unsigned char original_password[4+1] = "2196";
	unsigned char entered_password[4+1] = {'\0'};
	int j;
	
	for (int i=0;i<3;i++) //3 trials only
     6f6:	09 f0       	breq	.+2      	; 0x6fa <main+0xe8>
     6f8:	9a cf       	rjmp	.-204    	; 0x62e <main+0x1c>
			
		}
		
	}
	
	CLEAR;
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
	Lcdprintf("Choose ");
     700:	83 ed       	ldi	r24, 0xD3	; 211
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Lcdprintf>
	NEWLINE_2ND_ROW;
     708:	80 ec       	ldi	r24, 0xC0	; 192
     70a:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
	Lcdprintf("1-Open safe");
     70e:	8b ed       	ldi	r24, 0xDB	; 219
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Lcdprintf>
	NEWLINE_3RD_ROW;
     716:	80 e9       	ldi	r24, 0x90	; 144
     718:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
	Lcdprintf("2-Close safe");
     71c:	87 ee       	ldi	r24, 0xE7	; 231
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Lcdprintf>
	NEWLINE_4TH_ROW;
     724:	80 ed       	ldi	r24, 0xD0	; 208
     726:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
	Lcdprintf("3-Change Password");
     72a:	84 ef       	ldi	r24, 0xF4	; 244
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Lcdprintf>
	
	while(1)
	{
		
	switch(Get_Key())
     732:	0e 94 1f 01 	call	0x23e	; 0x23e <Get_Key>
     736:	81 33       	cpi	r24, 0x31	; 49
     738:	19 f0       	breq	.+6      	; 0x740 <main+0x12e>
     73a:	82 33       	cpi	r24, 0x32	; 50
     73c:	91 f0       	breq	.+36     	; 0x762 <main+0x150>
     73e:	f9 cf       	rjmp	.-14     	; 0x732 <main+0x120>
	{
		case '1': OCR1A = C_angle(0);
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	cb 01       	movw	r24, r22
     746:	0e 94 cb 04 	call	0x996	; 0x996 <C_angle>
     74a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__fixunssfsi>
     74e:	7b bd       	out	0x2b, r23	; 43
     750:	6a bd       	out	0x2a, r22	; 42
		NEWLINE_1ST_ROW;
     752:	80 e8       	ldi	r24, 0x80	; 128
     754:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
		Lcdprintf("safe opened");
     758:	86 e0       	ldi	r24, 0x06	; 6
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Lcdprintf>
		break;
     760:	e8 cf       	rjmp	.-48     	; 0x732 <main+0x120>
		case '2': OCR1A = C_angle(90);
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	84 eb       	ldi	r24, 0xB4	; 180
     768:	92 e4       	ldi	r25, 0x42	; 66
     76a:	0e 94 cb 04 	call	0x996	; 0x996 <C_angle>
     76e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__fixunssfsi>
     772:	7b bd       	out	0x2b, r23	; 43
     774:	6a bd       	out	0x2a, r22	; 42
		NEWLINE_1ST_ROW;
     776:	80 e8       	ldi	r24, 0x80	; 128
     778:	0e 94 58 00 	call	0xb0	; 0xb0 <Lcdwritecmd>
		Lcdprintf("safe closed");
     77c:	82 e1       	ldi	r24, 0x12	; 18
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Lcdprintf>
		break;
     784:	d6 cf       	rjmp	.-84     	; 0x732 <main+0x120>

00000786 <readbit>:
	ICR1 = 19999 ; // total period equal 20ms
	
}
void GenerateSignal()
{
	OCR0=(ADC_Read()>>2);
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	02 c0       	rjmp	.+4      	; 0x78e <readbit+0x8>
     78a:	95 95       	asr	r25
     78c:	87 95       	ror	r24
     78e:	6a 95       	dec	r22
     790:	e2 f7       	brpl	.-8      	; 0x78a <readbit+0x4>
     792:	81 70       	andi	r24, 0x01	; 1
     794:	08 95       	ret

00000796 <interruptInit>:
     796:	8b 98       	cbi	0x11, 3	; 17
     798:	93 9a       	sbi	0x12, 3	; 18
     79a:	85 b7       	in	r24, 0x35	; 53
     79c:	81 60       	ori	r24, 0x01	; 1
     79e:	85 bf       	out	0x35, r24	; 53
     7a0:	85 b7       	in	r24, 0x35	; 53
     7a2:	82 60       	ori	r24, 0x02	; 2
     7a4:	85 bf       	out	0x35, r24	; 53
     7a6:	8f b7       	in	r24, 0x3f	; 63
     7a8:	80 68       	ori	r24, 0x80	; 128
     7aa:	8f bf       	out	0x3f, r24	; 63
     7ac:	8b b7       	in	r24, 0x3b	; 59
     7ae:	80 68       	ori	r24, 0x80	; 128
     7b0:	8b bf       	out	0x3b, r24	; 59
     7b2:	08 95       	ret

000007b4 <ADC_INIT>:
     7b4:	d1 98       	cbi	0x1a, 1	; 26
     7b6:	3e 9a       	sbi	0x07, 6	; 7
     7b8:	38 9a       	sbi	0x07, 0	; 7
     7ba:	37 9a       	sbi	0x06, 7	; 6
     7bc:	31 9a       	sbi	0x06, 1	; 6
     7be:	32 9a       	sbi	0x06, 2	; 6
     7c0:	8f e1       	ldi	r24, 0x1F	; 31
     7c2:	9e e4       	ldi	r25, 0x4E	; 78
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <ADC_INIT+0x10>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <ADC_INIT+0x16>
     7ca:	00 00       	nop
     7cc:	08 95       	ret

000007ce <ADC_Read>:
     7ce:	36 9a       	sbi	0x06, 6	; 6
     7d0:	34 9b       	sbis	0x06, 4	; 6
     7d2:	fe cf       	rjmp	.-4      	; 0x7d0 <ADC_Read+0x2>
     7d4:	84 b1       	in	r24, 0x04	; 4
     7d6:	95 b1       	in	r25, 0x05	; 5
     7d8:	08 95       	ret

000007da <float_to_ascii>:
     7da:	4f 92       	push	r4
     7dc:	5f 92       	push	r5
     7de:	6f 92       	push	r6
     7e0:	7f 92       	push	r7
     7e2:	af 92       	push	r10
     7e4:	bf 92       	push	r11
     7e6:	cf 92       	push	r12
     7e8:	df 92       	push	r13
     7ea:	ef 92       	push	r14
     7ec:	ff 92       	push	r15
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
     7fa:	2a 97       	sbiw	r28, 0x0a	; 10
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	de bf       	out	0x3e, r29	; 62
     802:	0f be       	out	0x3f, r0	; 63
     804:	cd bf       	out	0x3d, r28	; 61
     806:	6b 01       	movw	r12, r22
     808:	7c 01       	movw	r14, r24
     80a:	fe 01       	movw	r30, r28
     80c:	31 96       	adiw	r30, 0x01	; 1
     80e:	8a e0       	ldi	r24, 0x0A	; 10
     810:	df 01       	movw	r26, r30
     812:	1d 92       	st	X+, r1
     814:	8a 95       	dec	r24
     816:	e9 f7       	brne	.-6      	; 0x812 <float_to_ascii+0x38>
     818:	c7 01       	movw	r24, r14
     81a:	b6 01       	movw	r22, r12
     81c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__fixsfsi>
     820:	2b 01       	movw	r4, r22
     822:	3c 01       	movw	r6, r24
     824:	07 2e       	mov	r0, r23
     826:	00 0c       	add	r0, r0
     828:	88 0b       	sbc	r24, r24
     82a:	99 0b       	sbc	r25, r25
     82c:	0e 94 12 06 	call	0xc24	; 0xc24 <__floatsisf>
     830:	9b 01       	movw	r18, r22
     832:	ac 01       	movw	r20, r24
     834:	c7 01       	movw	r24, r14
     836:	b6 01       	movw	r22, r12
     838:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__subsf3>
     83c:	6b 01       	movw	r12, r22
     83e:	7c 01       	movw	r14, r24
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	40 e8       	ldi	r20, 0x80	; 128
     846:	5f e3       	ldi	r21, 0x3F	; 63
     848:	0e 94 63 05 	call	0xac6	; 0xac6 <__cmpsf2>
     84c:	88 23       	and	r24, r24
     84e:	0c f0       	brlt	.+2      	; 0x852 <float_to_ascii+0x78>
     850:	40 c0       	rjmp	.+128    	; 0x8d2 <__stack+0x73>
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	a9 01       	movw	r20, r18
     858:	c7 01       	movw	r24, r14
     85a:	b6 01       	movw	r22, r12
     85c:	0e 94 63 05 	call	0xac6	; 0xac6 <__cmpsf2>
     860:	88 23       	and	r24, r24
     862:	b9 f1       	breq	.+110    	; 0x8d2 <__stack+0x73>
     864:	00 e0       	ldi	r16, 0x00	; 0
     866:	10 e0       	ldi	r17, 0x00	; 0
     868:	01 c0       	rjmp	.+2      	; 0x86c <__stack+0xd>
     86a:	85 01       	movw	r16, r10
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	40 e2       	ldi	r20, 0x20	; 32
     872:	51 e4       	ldi	r21, 0x41	; 65
     874:	c7 01       	movw	r24, r14
     876:	b6 01       	movw	r22, r12
     878:	0e 94 c2 06 	call	0xd84	; 0xd84 <__mulsf3>
     87c:	6b 01       	movw	r12, r22
     87e:	7c 01       	movw	r14, r24
     880:	58 01       	movw	r10, r16
     882:	bf ef       	ldi	r27, 0xFF	; 255
     884:	ab 1a       	sub	r10, r27
     886:	bb 0a       	sbc	r11, r27
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e8       	ldi	r20, 0x80	; 128
     88e:	5f e3       	ldi	r21, 0x3F	; 63
     890:	0e 94 63 05 	call	0xac6	; 0xac6 <__cmpsf2>
     894:	88 23       	and	r24, r24
     896:	4c f4       	brge	.+18     	; 0x8aa <__stack+0x4b>
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	a9 01       	movw	r20, r18
     89e:	c7 01       	movw	r24, r14
     8a0:	b6 01       	movw	r22, r12
     8a2:	0e 94 63 05 	call	0xac6	; 0xac6 <__cmpsf2>
     8a6:	81 11       	cpse	r24, r1
     8a8:	e0 cf       	rjmp	.-64     	; 0x86a <__stack+0xb>
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	40 e2       	ldi	r20, 0x20	; 32
     8b0:	51 e4       	ldi	r21, 0x41	; 65
     8b2:	c7 01       	movw	r24, r14
     8b4:	b6 01       	movw	r22, r12
     8b6:	0e 94 c2 06 	call	0xd84	; 0xd84 <__mulsf3>
     8ba:	6b 01       	movw	r12, r22
     8bc:	7c 01       	movw	r14, r24
     8be:	ab 28       	or	r10, r11
     8c0:	91 f0       	breq	.+36     	; 0x8e6 <__stack+0x87>
     8c2:	a8 01       	movw	r20, r16
     8c4:	60 e3       	ldi	r22, 0x30	; 48
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	ce 01       	movw	r24, r28
     8ca:	01 96       	adiw	r24, 0x01	; 1
     8cc:	0e 94 2f 07 	call	0xe5e	; 0xe5e <memset>
     8d0:	0a c0       	rjmp	.+20     	; 0x8e6 <__stack+0x87>
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	40 e2       	ldi	r20, 0x20	; 32
     8d8:	51 e4       	ldi	r21, 0x41	; 65
     8da:	c7 01       	movw	r24, r14
     8dc:	b6 01       	movw	r22, r12
     8de:	0e 94 c2 06 	call	0xd84	; 0xd84 <__mulsf3>
     8e2:	6b 01       	movw	r12, r22
     8e4:	7c 01       	movw	r14, r24
     8e6:	c7 01       	movw	r24, r14
     8e8:	b6 01       	movw	r22, r12
     8ea:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__fixsfsi>
     8ee:	7f 93       	push	r23
     8f0:	6f 93       	push	r22
     8f2:	ce 01       	movw	r24, r28
     8f4:	01 96       	adiw	r24, 0x01	; 1
     8f6:	9f 93       	push	r25
     8f8:	8f 93       	push	r24
     8fa:	5f 92       	push	r5
     8fc:	4f 92       	push	r4
     8fe:	8e e1       	ldi	r24, 0x1E	; 30
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	9f 93       	push	r25
     904:	8f 93       	push	r24
     906:	86 e2       	ldi	r24, 0x26	; 38
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	9f 93       	push	r25
     90c:	8f 93       	push	r24
     90e:	0e 94 36 07 	call	0xe6c	; 0xe6c <sprintf>
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	86 e2       	ldi	r24, 0x26	; 38
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	2a 96       	adiw	r28, 0x0a	; 10
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	df 90       	pop	r13
     93a:	cf 90       	pop	r12
     93c:	bf 90       	pop	r11
     93e:	af 90       	pop	r10
     940:	7f 90       	pop	r7
     942:	6f 90       	pop	r6
     944:	5f 90       	pop	r5
     946:	4f 90       	pop	r4
     948:	08 95       	ret

0000094a <Read_analoge>:
     94a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <ADC_Read>
     94e:	bc 01       	movw	r22, r24
     950:	66 0f       	add	r22, r22
     952:	77 1f       	adc	r23, r23
     954:	88 0f       	add	r24, r24
     956:	99 1f       	adc	r25, r25
     958:	88 0f       	add	r24, r24
     95a:	99 1f       	adc	r25, r25
     95c:	88 0f       	add	r24, r24
     95e:	99 1f       	adc	r25, r25
     960:	68 0f       	add	r22, r24
     962:	79 1f       	adc	r23, r25
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 10 06 	call	0xc20	; 0xc20 <__floatunsisf>
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 ec       	ldi	r19, 0xC0	; 192
     970:	4f e7       	ldi	r20, 0x7F	; 127
     972:	54 e4       	ldi	r21, 0x44	; 68
     974:	0e 94 68 05 	call	0xad0	; 0xad0 <__divsf3>
     978:	0e 94 ed 03 	call	0x7da	; 0x7da <float_to_ascii>
     97c:	08 95       	ret

0000097e <Timer_1_Init>:
     97e:	8d 9a       	sbi	0x11, 5	; 17
     980:	8f b5       	in	r24, 0x2f	; 47
     982:	82 68       	ori	r24, 0x82	; 130
     984:	8f bd       	out	0x2f, r24	; 47
     986:	8e b5       	in	r24, 0x2e	; 46
     988:	8a 61       	ori	r24, 0x1A	; 26
     98a:	8e bd       	out	0x2e, r24	; 46
     98c:	8f e1       	ldi	r24, 0x1F	; 31
     98e:	9e e4       	ldi	r25, 0x4E	; 78
     990:	97 bd       	out	0x27, r25	; 39
     992:	86 bd       	out	0x26, r24	; 38
     994:	08 95       	ret

00000996 <C_angle>:
}

float C_angle(float angel)
{
	float value =(((angel-(-90))*(2-1))/(90-(-90)))+1;  //interpolation
	return (value *19999/20);
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	44 eb       	ldi	r20, 0xB4	; 180
     99c:	52 e4       	ldi	r21, 0x42	; 66
     99e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__addsf3>
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	44 e3       	ldi	r20, 0x34	; 52
     9a8:	53 e4       	ldi	r21, 0x43	; 67
     9aa:	0e 94 68 05 	call	0xad0	; 0xad0 <__divsf3>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e8       	ldi	r20, 0x80	; 128
     9b4:	5f e3       	ldi	r21, 0x3F	; 63
     9b6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__addsf3>
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	3e e3       	ldi	r19, 0x3E	; 62
     9be:	4c e9       	ldi	r20, 0x9C	; 156
     9c0:	56 e4       	ldi	r21, 0x46	; 70
     9c2:	0e 94 c2 06 	call	0xd84	; 0xd84 <__mulsf3>
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	40 ea       	ldi	r20, 0xA0	; 160
     9cc:	51 e4       	ldi	r21, 0x41	; 65
     9ce:	0e 94 68 05 	call	0xad0	; 0xad0 <__divsf3>
}
     9d2:	08 95       	ret

000009d4 <SPI_Master_init>:

//=====================================SPI master==========================

void SPI_Master_init()
{
	DDRB |=(1<<PB4)|(1<<PB5)|(1<<PB7);
     9d4:	87 b3       	in	r24, 0x17	; 23
     9d6:	80 6b       	ori	r24, 0xB0	; 176
     9d8:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR1); //enabling SPI protocol and setting this MCU as master
     9da:	8d b1       	in	r24, 0x0d	; 13
     9dc:	82 65       	ori	r24, 0x52	; 82
     9de:	8d b9       	out	0x0d, r24	; 13
     9e0:	08 95       	ret

000009e2 <SPI_M_sendchar>:
}

unsigned char SPI_M_sendchar(unsigned char data_trans)
{
    static unsigned char data_recieved;
	SPDR = data_trans;
     9e2:	8f b9       	out	0x0f, r24	; 15
	while(readbit(SPSR,SPIF)==0); // to wait until finish sending data
     9e4:	77 9b       	sbis	0x0e, 7	; 14
     9e6:	fe cf       	rjmp	.-4      	; 0x9e4 <SPI_M_sendchar+0x2>
	data_recieved=SPDR;
     9e8:	8f b1       	in	r24, 0x0f	; 15
	
	return data_recieved;
	
}
     9ea:	08 95       	ret

000009ec <__subsf3>:
     9ec:	50 58       	subi	r21, 0x80	; 128

000009ee <__addsf3>:
     9ee:	bb 27       	eor	r27, r27
     9f0:	aa 27       	eor	r26, r26
     9f2:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__addsf3x>
     9f6:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__fp_round>
     9fa:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fp_pscA>
     9fe:	38 f0       	brcs	.+14     	; 0xa0e <__addsf3+0x20>
     a00:	0e 94 81 06 	call	0xd02	; 0xd02 <__fp_pscB>
     a04:	20 f0       	brcs	.+8      	; 0xa0e <__addsf3+0x20>
     a06:	39 f4       	brne	.+14     	; 0xa16 <__addsf3+0x28>
     a08:	9f 3f       	cpi	r25, 0xFF	; 255
     a0a:	19 f4       	brne	.+6      	; 0xa12 <__addsf3+0x24>
     a0c:	26 f4       	brtc	.+8      	; 0xa16 <__addsf3+0x28>
     a0e:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_nan>
     a12:	0e f4       	brtc	.+2      	; 0xa16 <__addsf3+0x28>
     a14:	e0 95       	com	r30
     a16:	e7 fb       	bst	r30, 7
     a18:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__fp_inf>

00000a1c <__addsf3x>:
     a1c:	e9 2f       	mov	r30, r25
     a1e:	0e 94 99 06 	call	0xd32	; 0xd32 <__fp_split3>
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__addsf3+0xc>
     a24:	ba 17       	cp	r27, r26
     a26:	62 07       	cpc	r22, r18
     a28:	73 07       	cpc	r23, r19
     a2a:	84 07       	cpc	r24, r20
     a2c:	95 07       	cpc	r25, r21
     a2e:	20 f0       	brcs	.+8      	; 0xa38 <__addsf3x+0x1c>
     a30:	79 f4       	brne	.+30     	; 0xa50 <__addsf3x+0x34>
     a32:	a6 f5       	brtc	.+104    	; 0xa9c <__addsf3x+0x80>
     a34:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_zero>
     a38:	0e f4       	brtc	.+2      	; 0xa3c <__addsf3x+0x20>
     a3a:	e0 95       	com	r30
     a3c:	0b 2e       	mov	r0, r27
     a3e:	ba 2f       	mov	r27, r26
     a40:	a0 2d       	mov	r26, r0
     a42:	0b 01       	movw	r0, r22
     a44:	b9 01       	movw	r22, r18
     a46:	90 01       	movw	r18, r0
     a48:	0c 01       	movw	r0, r24
     a4a:	ca 01       	movw	r24, r20
     a4c:	a0 01       	movw	r20, r0
     a4e:	11 24       	eor	r1, r1
     a50:	ff 27       	eor	r31, r31
     a52:	59 1b       	sub	r21, r25
     a54:	99 f0       	breq	.+38     	; 0xa7c <__addsf3x+0x60>
     a56:	59 3f       	cpi	r21, 0xF9	; 249
     a58:	50 f4       	brcc	.+20     	; 0xa6e <__addsf3x+0x52>
     a5a:	50 3e       	cpi	r21, 0xE0	; 224
     a5c:	68 f1       	brcs	.+90     	; 0xab8 <__addsf3x+0x9c>
     a5e:	1a 16       	cp	r1, r26
     a60:	f0 40       	sbci	r31, 0x00	; 0
     a62:	a2 2f       	mov	r26, r18
     a64:	23 2f       	mov	r18, r19
     a66:	34 2f       	mov	r19, r20
     a68:	44 27       	eor	r20, r20
     a6a:	58 5f       	subi	r21, 0xF8	; 248
     a6c:	f3 cf       	rjmp	.-26     	; 0xa54 <__addsf3x+0x38>
     a6e:	46 95       	lsr	r20
     a70:	37 95       	ror	r19
     a72:	27 95       	ror	r18
     a74:	a7 95       	ror	r26
     a76:	f0 40       	sbci	r31, 0x00	; 0
     a78:	53 95       	inc	r21
     a7a:	c9 f7       	brne	.-14     	; 0xa6e <__addsf3x+0x52>
     a7c:	7e f4       	brtc	.+30     	; 0xa9c <__addsf3x+0x80>
     a7e:	1f 16       	cp	r1, r31
     a80:	ba 0b       	sbc	r27, r26
     a82:	62 0b       	sbc	r22, r18
     a84:	73 0b       	sbc	r23, r19
     a86:	84 0b       	sbc	r24, r20
     a88:	ba f0       	brmi	.+46     	; 0xab8 <__addsf3x+0x9c>
     a8a:	91 50       	subi	r25, 0x01	; 1
     a8c:	a1 f0       	breq	.+40     	; 0xab6 <__addsf3x+0x9a>
     a8e:	ff 0f       	add	r31, r31
     a90:	bb 1f       	adc	r27, r27
     a92:	66 1f       	adc	r22, r22
     a94:	77 1f       	adc	r23, r23
     a96:	88 1f       	adc	r24, r24
     a98:	c2 f7       	brpl	.-16     	; 0xa8a <__addsf3x+0x6e>
     a9a:	0e c0       	rjmp	.+28     	; 0xab8 <__addsf3x+0x9c>
     a9c:	ba 0f       	add	r27, r26
     a9e:	62 1f       	adc	r22, r18
     aa0:	73 1f       	adc	r23, r19
     aa2:	84 1f       	adc	r24, r20
     aa4:	48 f4       	brcc	.+18     	; 0xab8 <__addsf3x+0x9c>
     aa6:	87 95       	ror	r24
     aa8:	77 95       	ror	r23
     aaa:	67 95       	ror	r22
     aac:	b7 95       	ror	r27
     aae:	f7 95       	ror	r31
     ab0:	9e 3f       	cpi	r25, 0xFE	; 254
     ab2:	08 f0       	brcs	.+2      	; 0xab6 <__addsf3x+0x9a>
     ab4:	b0 cf       	rjmp	.-160    	; 0xa16 <__addsf3+0x28>
     ab6:	93 95       	inc	r25
     ab8:	88 0f       	add	r24, r24
     aba:	08 f0       	brcs	.+2      	; 0xabe <__addsf3x+0xa2>
     abc:	99 27       	eor	r25, r25
     abe:	ee 0f       	add	r30, r30
     ac0:	97 95       	ror	r25
     ac2:	87 95       	ror	r24
     ac4:	08 95       	ret

00000ac6 <__cmpsf2>:
     ac6:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__fp_cmp>
     aca:	08 f4       	brcc	.+2      	; 0xace <__cmpsf2+0x8>
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	08 95       	ret

00000ad0 <__divsf3>:
     ad0:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__divsf3x>
     ad4:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__fp_round>
     ad8:	0e 94 81 06 	call	0xd02	; 0xd02 <__fp_pscB>
     adc:	58 f0       	brcs	.+22     	; 0xaf4 <__divsf3+0x24>
     ade:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fp_pscA>
     ae2:	40 f0       	brcs	.+16     	; 0xaf4 <__divsf3+0x24>
     ae4:	29 f4       	brne	.+10     	; 0xaf0 <__divsf3+0x20>
     ae6:	5f 3f       	cpi	r21, 0xFF	; 255
     ae8:	29 f0       	breq	.+10     	; 0xaf4 <__divsf3+0x24>
     aea:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__fp_inf>
     aee:	51 11       	cpse	r21, r1
     af0:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_szero>
     af4:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_nan>

00000af8 <__divsf3x>:
     af8:	0e 94 99 06 	call	0xd32	; 0xd32 <__fp_split3>
     afc:	68 f3       	brcs	.-38     	; 0xad8 <__divsf3+0x8>

00000afe <__divsf3_pse>:
     afe:	99 23       	and	r25, r25
     b00:	b1 f3       	breq	.-20     	; 0xaee <__divsf3+0x1e>
     b02:	55 23       	and	r21, r21
     b04:	91 f3       	breq	.-28     	; 0xaea <__divsf3+0x1a>
     b06:	95 1b       	sub	r25, r21
     b08:	55 0b       	sbc	r21, r21
     b0a:	bb 27       	eor	r27, r27
     b0c:	aa 27       	eor	r26, r26
     b0e:	62 17       	cp	r22, r18
     b10:	73 07       	cpc	r23, r19
     b12:	84 07       	cpc	r24, r20
     b14:	38 f0       	brcs	.+14     	; 0xb24 <__divsf3_pse+0x26>
     b16:	9f 5f       	subi	r25, 0xFF	; 255
     b18:	5f 4f       	sbci	r21, 0xFF	; 255
     b1a:	22 0f       	add	r18, r18
     b1c:	33 1f       	adc	r19, r19
     b1e:	44 1f       	adc	r20, r20
     b20:	aa 1f       	adc	r26, r26
     b22:	a9 f3       	breq	.-22     	; 0xb0e <__divsf3_pse+0x10>
     b24:	35 d0       	rcall	.+106    	; 0xb90 <__divsf3_pse+0x92>
     b26:	0e 2e       	mov	r0, r30
     b28:	3a f0       	brmi	.+14     	; 0xb38 <__divsf3_pse+0x3a>
     b2a:	e0 e8       	ldi	r30, 0x80	; 128
     b2c:	32 d0       	rcall	.+100    	; 0xb92 <__divsf3_pse+0x94>
     b2e:	91 50       	subi	r25, 0x01	; 1
     b30:	50 40       	sbci	r21, 0x00	; 0
     b32:	e6 95       	lsr	r30
     b34:	00 1c       	adc	r0, r0
     b36:	ca f7       	brpl	.-14     	; 0xb2a <__divsf3_pse+0x2c>
     b38:	2b d0       	rcall	.+86     	; 0xb90 <__divsf3_pse+0x92>
     b3a:	fe 2f       	mov	r31, r30
     b3c:	29 d0       	rcall	.+82     	; 0xb90 <__divsf3_pse+0x92>
     b3e:	66 0f       	add	r22, r22
     b40:	77 1f       	adc	r23, r23
     b42:	88 1f       	adc	r24, r24
     b44:	bb 1f       	adc	r27, r27
     b46:	26 17       	cp	r18, r22
     b48:	37 07       	cpc	r19, r23
     b4a:	48 07       	cpc	r20, r24
     b4c:	ab 07       	cpc	r26, r27
     b4e:	b0 e8       	ldi	r27, 0x80	; 128
     b50:	09 f0       	breq	.+2      	; 0xb54 <__divsf3_pse+0x56>
     b52:	bb 0b       	sbc	r27, r27
     b54:	80 2d       	mov	r24, r0
     b56:	bf 01       	movw	r22, r30
     b58:	ff 27       	eor	r31, r31
     b5a:	93 58       	subi	r25, 0x83	; 131
     b5c:	5f 4f       	sbci	r21, 0xFF	; 255
     b5e:	3a f0       	brmi	.+14     	; 0xb6e <__divsf3_pse+0x70>
     b60:	9e 3f       	cpi	r25, 0xFE	; 254
     b62:	51 05       	cpc	r21, r1
     b64:	78 f0       	brcs	.+30     	; 0xb84 <__divsf3_pse+0x86>
     b66:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__fp_inf>
     b6a:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_szero>
     b6e:	5f 3f       	cpi	r21, 0xFF	; 255
     b70:	e4 f3       	brlt	.-8      	; 0xb6a <__divsf3_pse+0x6c>
     b72:	98 3e       	cpi	r25, 0xE8	; 232
     b74:	d4 f3       	brlt	.-12     	; 0xb6a <__divsf3_pse+0x6c>
     b76:	86 95       	lsr	r24
     b78:	77 95       	ror	r23
     b7a:	67 95       	ror	r22
     b7c:	b7 95       	ror	r27
     b7e:	f7 95       	ror	r31
     b80:	9f 5f       	subi	r25, 0xFF	; 255
     b82:	c9 f7       	brne	.-14     	; 0xb76 <__divsf3_pse+0x78>
     b84:	88 0f       	add	r24, r24
     b86:	91 1d       	adc	r25, r1
     b88:	96 95       	lsr	r25
     b8a:	87 95       	ror	r24
     b8c:	97 f9       	bld	r25, 7
     b8e:	08 95       	ret
     b90:	e1 e0       	ldi	r30, 0x01	; 1
     b92:	66 0f       	add	r22, r22
     b94:	77 1f       	adc	r23, r23
     b96:	88 1f       	adc	r24, r24
     b98:	bb 1f       	adc	r27, r27
     b9a:	62 17       	cp	r22, r18
     b9c:	73 07       	cpc	r23, r19
     b9e:	84 07       	cpc	r24, r20
     ba0:	ba 07       	cpc	r27, r26
     ba2:	20 f0       	brcs	.+8      	; 0xbac <__divsf3_pse+0xae>
     ba4:	62 1b       	sub	r22, r18
     ba6:	73 0b       	sbc	r23, r19
     ba8:	84 0b       	sbc	r24, r20
     baa:	ba 0b       	sbc	r27, r26
     bac:	ee 1f       	adc	r30, r30
     bae:	88 f7       	brcc	.-30     	; 0xb92 <__divsf3_pse+0x94>
     bb0:	e0 95       	com	r30
     bb2:	08 95       	ret

00000bb4 <__fixsfsi>:
     bb4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__fixunssfsi>
     bb8:	68 94       	set
     bba:	b1 11       	cpse	r27, r1
     bbc:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_szero>
     bc0:	08 95       	ret

00000bc2 <__fixunssfsi>:
     bc2:	0e 94 a1 06 	call	0xd42	; 0xd42 <__fp_splitA>
     bc6:	88 f0       	brcs	.+34     	; 0xbea <__fixunssfsi+0x28>
     bc8:	9f 57       	subi	r25, 0x7F	; 127
     bca:	98 f0       	brcs	.+38     	; 0xbf2 <__fixunssfsi+0x30>
     bcc:	b9 2f       	mov	r27, r25
     bce:	99 27       	eor	r25, r25
     bd0:	b7 51       	subi	r27, 0x17	; 23
     bd2:	b0 f0       	brcs	.+44     	; 0xc00 <__fixunssfsi+0x3e>
     bd4:	e1 f0       	breq	.+56     	; 0xc0e <__fixunssfsi+0x4c>
     bd6:	66 0f       	add	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	88 1f       	adc	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	1a f0       	brmi	.+6      	; 0xbe6 <__fixunssfsi+0x24>
     be0:	ba 95       	dec	r27
     be2:	c9 f7       	brne	.-14     	; 0xbd6 <__fixunssfsi+0x14>
     be4:	14 c0       	rjmp	.+40     	; 0xc0e <__fixunssfsi+0x4c>
     be6:	b1 30       	cpi	r27, 0x01	; 1
     be8:	91 f0       	breq	.+36     	; 0xc0e <__fixunssfsi+0x4c>
     bea:	0e 94 bb 06 	call	0xd76	; 0xd76 <__fp_zero>
     bee:	b1 e0       	ldi	r27, 0x01	; 1
     bf0:	08 95       	ret
     bf2:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_zero>
     bf6:	67 2f       	mov	r22, r23
     bf8:	78 2f       	mov	r23, r24
     bfa:	88 27       	eor	r24, r24
     bfc:	b8 5f       	subi	r27, 0xF8	; 248
     bfe:	39 f0       	breq	.+14     	; 0xc0e <__fixunssfsi+0x4c>
     c00:	b9 3f       	cpi	r27, 0xF9	; 249
     c02:	cc f3       	brlt	.-14     	; 0xbf6 <__fixunssfsi+0x34>
     c04:	86 95       	lsr	r24
     c06:	77 95       	ror	r23
     c08:	67 95       	ror	r22
     c0a:	b3 95       	inc	r27
     c0c:	d9 f7       	brne	.-10     	; 0xc04 <__fixunssfsi+0x42>
     c0e:	3e f4       	brtc	.+14     	; 0xc1e <__fixunssfsi+0x5c>
     c10:	90 95       	com	r25
     c12:	80 95       	com	r24
     c14:	70 95       	com	r23
     c16:	61 95       	neg	r22
     c18:	7f 4f       	sbci	r23, 0xFF	; 255
     c1a:	8f 4f       	sbci	r24, 0xFF	; 255
     c1c:	9f 4f       	sbci	r25, 0xFF	; 255
     c1e:	08 95       	ret

00000c20 <__floatunsisf>:
     c20:	e8 94       	clt
     c22:	09 c0       	rjmp	.+18     	; 0xc36 <__floatsisf+0x12>

00000c24 <__floatsisf>:
     c24:	97 fb       	bst	r25, 7
     c26:	3e f4       	brtc	.+14     	; 0xc36 <__floatsisf+0x12>
     c28:	90 95       	com	r25
     c2a:	80 95       	com	r24
     c2c:	70 95       	com	r23
     c2e:	61 95       	neg	r22
     c30:	7f 4f       	sbci	r23, 0xFF	; 255
     c32:	8f 4f       	sbci	r24, 0xFF	; 255
     c34:	9f 4f       	sbci	r25, 0xFF	; 255
     c36:	99 23       	and	r25, r25
     c38:	a9 f0       	breq	.+42     	; 0xc64 <__floatsisf+0x40>
     c3a:	f9 2f       	mov	r31, r25
     c3c:	96 e9       	ldi	r25, 0x96	; 150
     c3e:	bb 27       	eor	r27, r27
     c40:	93 95       	inc	r25
     c42:	f6 95       	lsr	r31
     c44:	87 95       	ror	r24
     c46:	77 95       	ror	r23
     c48:	67 95       	ror	r22
     c4a:	b7 95       	ror	r27
     c4c:	f1 11       	cpse	r31, r1
     c4e:	f8 cf       	rjmp	.-16     	; 0xc40 <__floatsisf+0x1c>
     c50:	fa f4       	brpl	.+62     	; 0xc90 <__floatsisf+0x6c>
     c52:	bb 0f       	add	r27, r27
     c54:	11 f4       	brne	.+4      	; 0xc5a <__floatsisf+0x36>
     c56:	60 ff       	sbrs	r22, 0
     c58:	1b c0       	rjmp	.+54     	; 0xc90 <__floatsisf+0x6c>
     c5a:	6f 5f       	subi	r22, 0xFF	; 255
     c5c:	7f 4f       	sbci	r23, 0xFF	; 255
     c5e:	8f 4f       	sbci	r24, 0xFF	; 255
     c60:	9f 4f       	sbci	r25, 0xFF	; 255
     c62:	16 c0       	rjmp	.+44     	; 0xc90 <__floatsisf+0x6c>
     c64:	88 23       	and	r24, r24
     c66:	11 f0       	breq	.+4      	; 0xc6c <__floatsisf+0x48>
     c68:	96 e9       	ldi	r25, 0x96	; 150
     c6a:	11 c0       	rjmp	.+34     	; 0xc8e <__floatsisf+0x6a>
     c6c:	77 23       	and	r23, r23
     c6e:	21 f0       	breq	.+8      	; 0xc78 <__floatsisf+0x54>
     c70:	9e e8       	ldi	r25, 0x8E	; 142
     c72:	87 2f       	mov	r24, r23
     c74:	76 2f       	mov	r23, r22
     c76:	05 c0       	rjmp	.+10     	; 0xc82 <__floatsisf+0x5e>
     c78:	66 23       	and	r22, r22
     c7a:	71 f0       	breq	.+28     	; 0xc98 <__floatsisf+0x74>
     c7c:	96 e8       	ldi	r25, 0x86	; 134
     c7e:	86 2f       	mov	r24, r22
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	2a f0       	brmi	.+10     	; 0xc90 <__floatsisf+0x6c>
     c86:	9a 95       	dec	r25
     c88:	66 0f       	add	r22, r22
     c8a:	77 1f       	adc	r23, r23
     c8c:	88 1f       	adc	r24, r24
     c8e:	da f7       	brpl	.-10     	; 0xc86 <__floatsisf+0x62>
     c90:	88 0f       	add	r24, r24
     c92:	96 95       	lsr	r25
     c94:	87 95       	ror	r24
     c96:	97 f9       	bld	r25, 7
     c98:	08 95       	ret

00000c9a <__fp_cmp>:
     c9a:	99 0f       	add	r25, r25
     c9c:	00 08       	sbc	r0, r0
     c9e:	55 0f       	add	r21, r21
     ca0:	aa 0b       	sbc	r26, r26
     ca2:	e0 e8       	ldi	r30, 0x80	; 128
     ca4:	fe ef       	ldi	r31, 0xFE	; 254
     ca6:	16 16       	cp	r1, r22
     ca8:	17 06       	cpc	r1, r23
     caa:	e8 07       	cpc	r30, r24
     cac:	f9 07       	cpc	r31, r25
     cae:	c0 f0       	brcs	.+48     	; 0xce0 <__fp_cmp+0x46>
     cb0:	12 16       	cp	r1, r18
     cb2:	13 06       	cpc	r1, r19
     cb4:	e4 07       	cpc	r30, r20
     cb6:	f5 07       	cpc	r31, r21
     cb8:	98 f0       	brcs	.+38     	; 0xce0 <__fp_cmp+0x46>
     cba:	62 1b       	sub	r22, r18
     cbc:	73 0b       	sbc	r23, r19
     cbe:	84 0b       	sbc	r24, r20
     cc0:	95 0b       	sbc	r25, r21
     cc2:	39 f4       	brne	.+14     	; 0xcd2 <__fp_cmp+0x38>
     cc4:	0a 26       	eor	r0, r26
     cc6:	61 f0       	breq	.+24     	; 0xce0 <__fp_cmp+0x46>
     cc8:	23 2b       	or	r18, r19
     cca:	24 2b       	or	r18, r20
     ccc:	25 2b       	or	r18, r21
     cce:	21 f4       	brne	.+8      	; 0xcd8 <__fp_cmp+0x3e>
     cd0:	08 95       	ret
     cd2:	0a 26       	eor	r0, r26
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <__fp_cmp+0x3e>
     cd6:	a1 40       	sbci	r26, 0x01	; 1
     cd8:	a6 95       	lsr	r26
     cda:	8f ef       	ldi	r24, 0xFF	; 255
     cdc:	81 1d       	adc	r24, r1
     cde:	81 1d       	adc	r24, r1
     ce0:	08 95       	ret

00000ce2 <__fp_inf>:
     ce2:	97 f9       	bld	r25, 7
     ce4:	9f 67       	ori	r25, 0x7F	; 127
     ce6:	80 e8       	ldi	r24, 0x80	; 128
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	08 95       	ret

00000cee <__fp_nan>:
     cee:	9f ef       	ldi	r25, 0xFF	; 255
     cf0:	80 ec       	ldi	r24, 0xC0	; 192
     cf2:	08 95       	ret

00000cf4 <__fp_pscA>:
     cf4:	00 24       	eor	r0, r0
     cf6:	0a 94       	dec	r0
     cf8:	16 16       	cp	r1, r22
     cfa:	17 06       	cpc	r1, r23
     cfc:	18 06       	cpc	r1, r24
     cfe:	09 06       	cpc	r0, r25
     d00:	08 95       	ret

00000d02 <__fp_pscB>:
     d02:	00 24       	eor	r0, r0
     d04:	0a 94       	dec	r0
     d06:	12 16       	cp	r1, r18
     d08:	13 06       	cpc	r1, r19
     d0a:	14 06       	cpc	r1, r20
     d0c:	05 06       	cpc	r0, r21
     d0e:	08 95       	ret

00000d10 <__fp_round>:
     d10:	09 2e       	mov	r0, r25
     d12:	03 94       	inc	r0
     d14:	00 0c       	add	r0, r0
     d16:	11 f4       	brne	.+4      	; 0xd1c <__fp_round+0xc>
     d18:	88 23       	and	r24, r24
     d1a:	52 f0       	brmi	.+20     	; 0xd30 <__fp_round+0x20>
     d1c:	bb 0f       	add	r27, r27
     d1e:	40 f4       	brcc	.+16     	; 0xd30 <__fp_round+0x20>
     d20:	bf 2b       	or	r27, r31
     d22:	11 f4       	brne	.+4      	; 0xd28 <__fp_round+0x18>
     d24:	60 ff       	sbrs	r22, 0
     d26:	04 c0       	rjmp	.+8      	; 0xd30 <__fp_round+0x20>
     d28:	6f 5f       	subi	r22, 0xFF	; 255
     d2a:	7f 4f       	sbci	r23, 0xFF	; 255
     d2c:	8f 4f       	sbci	r24, 0xFF	; 255
     d2e:	9f 4f       	sbci	r25, 0xFF	; 255
     d30:	08 95       	ret

00000d32 <__fp_split3>:
     d32:	57 fd       	sbrc	r21, 7
     d34:	90 58       	subi	r25, 0x80	; 128
     d36:	44 0f       	add	r20, r20
     d38:	55 1f       	adc	r21, r21
     d3a:	59 f0       	breq	.+22     	; 0xd52 <__fp_splitA+0x10>
     d3c:	5f 3f       	cpi	r21, 0xFF	; 255
     d3e:	71 f0       	breq	.+28     	; 0xd5c <__fp_splitA+0x1a>
     d40:	47 95       	ror	r20

00000d42 <__fp_splitA>:
     d42:	88 0f       	add	r24, r24
     d44:	97 fb       	bst	r25, 7
     d46:	99 1f       	adc	r25, r25
     d48:	61 f0       	breq	.+24     	; 0xd62 <__fp_splitA+0x20>
     d4a:	9f 3f       	cpi	r25, 0xFF	; 255
     d4c:	79 f0       	breq	.+30     	; 0xd6c <__fp_splitA+0x2a>
     d4e:	87 95       	ror	r24
     d50:	08 95       	ret
     d52:	12 16       	cp	r1, r18
     d54:	13 06       	cpc	r1, r19
     d56:	14 06       	cpc	r1, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	f2 cf       	rjmp	.-28     	; 0xd40 <__fp_split3+0xe>
     d5c:	46 95       	lsr	r20
     d5e:	f1 df       	rcall	.-30     	; 0xd42 <__fp_splitA>
     d60:	08 c0       	rjmp	.+16     	; 0xd72 <__fp_splitA+0x30>
     d62:	16 16       	cp	r1, r22
     d64:	17 06       	cpc	r1, r23
     d66:	18 06       	cpc	r1, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	f1 cf       	rjmp	.-30     	; 0xd4e <__fp_splitA+0xc>
     d6c:	86 95       	lsr	r24
     d6e:	71 05       	cpc	r23, r1
     d70:	61 05       	cpc	r22, r1
     d72:	08 94       	sec
     d74:	08 95       	ret

00000d76 <__fp_zero>:
     d76:	e8 94       	clt

00000d78 <__fp_szero>:
     d78:	bb 27       	eor	r27, r27
     d7a:	66 27       	eor	r22, r22
     d7c:	77 27       	eor	r23, r23
     d7e:	cb 01       	movw	r24, r22
     d80:	97 f9       	bld	r25, 7
     d82:	08 95       	ret

00000d84 <__mulsf3>:
     d84:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__mulsf3x>
     d88:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__fp_round>
     d8c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fp_pscA>
     d90:	38 f0       	brcs	.+14     	; 0xda0 <__mulsf3+0x1c>
     d92:	0e 94 81 06 	call	0xd02	; 0xd02 <__fp_pscB>
     d96:	20 f0       	brcs	.+8      	; 0xda0 <__mulsf3+0x1c>
     d98:	95 23       	and	r25, r21
     d9a:	11 f0       	breq	.+4      	; 0xda0 <__mulsf3+0x1c>
     d9c:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__fp_inf>
     da0:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_nan>
     da4:	11 24       	eor	r1, r1
     da6:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_szero>

00000daa <__mulsf3x>:
     daa:	0e 94 99 06 	call	0xd32	; 0xd32 <__fp_split3>
     dae:	70 f3       	brcs	.-36     	; 0xd8c <__mulsf3+0x8>

00000db0 <__mulsf3_pse>:
     db0:	95 9f       	mul	r25, r21
     db2:	c1 f3       	breq	.-16     	; 0xda4 <__mulsf3+0x20>
     db4:	95 0f       	add	r25, r21
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	55 1f       	adc	r21, r21
     dba:	62 9f       	mul	r22, r18
     dbc:	f0 01       	movw	r30, r0
     dbe:	72 9f       	mul	r23, r18
     dc0:	bb 27       	eor	r27, r27
     dc2:	f0 0d       	add	r31, r0
     dc4:	b1 1d       	adc	r27, r1
     dc6:	63 9f       	mul	r22, r19
     dc8:	aa 27       	eor	r26, r26
     dca:	f0 0d       	add	r31, r0
     dcc:	b1 1d       	adc	r27, r1
     dce:	aa 1f       	adc	r26, r26
     dd0:	64 9f       	mul	r22, r20
     dd2:	66 27       	eor	r22, r22
     dd4:	b0 0d       	add	r27, r0
     dd6:	a1 1d       	adc	r26, r1
     dd8:	66 1f       	adc	r22, r22
     dda:	82 9f       	mul	r24, r18
     ddc:	22 27       	eor	r18, r18
     dde:	b0 0d       	add	r27, r0
     de0:	a1 1d       	adc	r26, r1
     de2:	62 1f       	adc	r22, r18
     de4:	73 9f       	mul	r23, r19
     de6:	b0 0d       	add	r27, r0
     de8:	a1 1d       	adc	r26, r1
     dea:	62 1f       	adc	r22, r18
     dec:	83 9f       	mul	r24, r19
     dee:	a0 0d       	add	r26, r0
     df0:	61 1d       	adc	r22, r1
     df2:	22 1f       	adc	r18, r18
     df4:	74 9f       	mul	r23, r20
     df6:	33 27       	eor	r19, r19
     df8:	a0 0d       	add	r26, r0
     dfa:	61 1d       	adc	r22, r1
     dfc:	23 1f       	adc	r18, r19
     dfe:	84 9f       	mul	r24, r20
     e00:	60 0d       	add	r22, r0
     e02:	21 1d       	adc	r18, r1
     e04:	82 2f       	mov	r24, r18
     e06:	76 2f       	mov	r23, r22
     e08:	6a 2f       	mov	r22, r26
     e0a:	11 24       	eor	r1, r1
     e0c:	9f 57       	subi	r25, 0x7F	; 127
     e0e:	50 40       	sbci	r21, 0x00	; 0
     e10:	9a f0       	brmi	.+38     	; 0xe38 <__mulsf3_pse+0x88>
     e12:	f1 f0       	breq	.+60     	; 0xe50 <__mulsf3_pse+0xa0>
     e14:	88 23       	and	r24, r24
     e16:	4a f0       	brmi	.+18     	; 0xe2a <__mulsf3_pse+0x7a>
     e18:	ee 0f       	add	r30, r30
     e1a:	ff 1f       	adc	r31, r31
     e1c:	bb 1f       	adc	r27, r27
     e1e:	66 1f       	adc	r22, r22
     e20:	77 1f       	adc	r23, r23
     e22:	88 1f       	adc	r24, r24
     e24:	91 50       	subi	r25, 0x01	; 1
     e26:	50 40       	sbci	r21, 0x00	; 0
     e28:	a9 f7       	brne	.-22     	; 0xe14 <__mulsf3_pse+0x64>
     e2a:	9e 3f       	cpi	r25, 0xFE	; 254
     e2c:	51 05       	cpc	r21, r1
     e2e:	80 f0       	brcs	.+32     	; 0xe50 <__mulsf3_pse+0xa0>
     e30:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__fp_inf>
     e34:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_szero>
     e38:	5f 3f       	cpi	r21, 0xFF	; 255
     e3a:	e4 f3       	brlt	.-8      	; 0xe34 <__mulsf3_pse+0x84>
     e3c:	98 3e       	cpi	r25, 0xE8	; 232
     e3e:	d4 f3       	brlt	.-12     	; 0xe34 <__mulsf3_pse+0x84>
     e40:	86 95       	lsr	r24
     e42:	77 95       	ror	r23
     e44:	67 95       	ror	r22
     e46:	b7 95       	ror	r27
     e48:	f7 95       	ror	r31
     e4a:	e7 95       	ror	r30
     e4c:	9f 5f       	subi	r25, 0xFF	; 255
     e4e:	c1 f7       	brne	.-16     	; 0xe40 <__mulsf3_pse+0x90>
     e50:	fe 2b       	or	r31, r30
     e52:	88 0f       	add	r24, r24
     e54:	91 1d       	adc	r25, r1
     e56:	96 95       	lsr	r25
     e58:	87 95       	ror	r24
     e5a:	97 f9       	bld	r25, 7
     e5c:	08 95       	ret

00000e5e <memset>:
     e5e:	dc 01       	movw	r26, r24
     e60:	01 c0       	rjmp	.+2      	; 0xe64 <memset+0x6>
     e62:	6d 93       	st	X+, r22
     e64:	41 50       	subi	r20, 0x01	; 1
     e66:	50 40       	sbci	r21, 0x00	; 0
     e68:	e0 f7       	brcc	.-8      	; 0xe62 <memset+0x4>
     e6a:	08 95       	ret

00000e6c <sprintf>:
     e6c:	ae e0       	ldi	r26, 0x0E	; 14
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ec e3       	ldi	r30, 0x3C	; 60
     e72:	f7 e0       	ldi	r31, 0x07	; 7
     e74:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__prologue_saves__+0x1c>
     e78:	0d 89       	ldd	r16, Y+21	; 0x15
     e7a:	1e 89       	ldd	r17, Y+22	; 0x16
     e7c:	86 e0       	ldi	r24, 0x06	; 6
     e7e:	8c 83       	std	Y+4, r24	; 0x04
     e80:	1a 83       	std	Y+2, r17	; 0x02
     e82:	09 83       	std	Y+1, r16	; 0x01
     e84:	8f ef       	ldi	r24, 0xFF	; 255
     e86:	9f e7       	ldi	r25, 0x7F	; 127
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	8d 83       	std	Y+5, r24	; 0x05
     e8c:	ae 01       	movw	r20, r28
     e8e:	47 5e       	subi	r20, 0xE7	; 231
     e90:	5f 4f       	sbci	r21, 0xFF	; 255
     e92:	6f 89       	ldd	r22, Y+23	; 0x17
     e94:	78 8d       	ldd	r23, Y+24	; 0x18
     e96:	ce 01       	movw	r24, r28
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <vfprintf>
     e9e:	ef 81       	ldd	r30, Y+7	; 0x07
     ea0:	f8 85       	ldd	r31, Y+8	; 0x08
     ea2:	e0 0f       	add	r30, r16
     ea4:	f1 1f       	adc	r31, r17
     ea6:	10 82       	st	Z, r1
     ea8:	2e 96       	adiw	r28, 0x0e	; 14
     eaa:	e4 e0       	ldi	r30, 0x04	; 4
     eac:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__epilogue_restores__+0x1c>

00000eb0 <vfprintf>:
     eb0:	ab e0       	ldi	r26, 0x0B	; 11
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	ee e5       	ldi	r30, 0x5E	; 94
     eb6:	f7 e0       	ldi	r31, 0x07	; 7
     eb8:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__prologue_saves__>
     ebc:	6c 01       	movw	r12, r24
     ebe:	7b 01       	movw	r14, r22
     ec0:	8a 01       	movw	r16, r20
     ec2:	fc 01       	movw	r30, r24
     ec4:	17 82       	std	Z+7, r1	; 0x07
     ec6:	16 82       	std	Z+6, r1	; 0x06
     ec8:	83 81       	ldd	r24, Z+3	; 0x03
     eca:	81 ff       	sbrs	r24, 1
     ecc:	cc c1       	rjmp	.+920    	; 0x1266 <vfprintf+0x3b6>
     ece:	ce 01       	movw	r24, r28
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	3c 01       	movw	r6, r24
     ed4:	f6 01       	movw	r30, r12
     ed6:	93 81       	ldd	r25, Z+3	; 0x03
     ed8:	f7 01       	movw	r30, r14
     eda:	93 fd       	sbrc	r25, 3
     edc:	85 91       	lpm	r24, Z+
     ede:	93 ff       	sbrs	r25, 3
     ee0:	81 91       	ld	r24, Z+
     ee2:	7f 01       	movw	r14, r30
     ee4:	88 23       	and	r24, r24
     ee6:	09 f4       	brne	.+2      	; 0xeea <vfprintf+0x3a>
     ee8:	ba c1       	rjmp	.+884    	; 0x125e <vfprintf+0x3ae>
     eea:	85 32       	cpi	r24, 0x25	; 37
     eec:	39 f4       	brne	.+14     	; 0xefc <vfprintf+0x4c>
     eee:	93 fd       	sbrc	r25, 3
     ef0:	85 91       	lpm	r24, Z+
     ef2:	93 ff       	sbrs	r25, 3
     ef4:	81 91       	ld	r24, Z+
     ef6:	7f 01       	movw	r14, r30
     ef8:	85 32       	cpi	r24, 0x25	; 37
     efa:	29 f4       	brne	.+10     	; 0xf06 <vfprintf+0x56>
     efc:	b6 01       	movw	r22, r12
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 4f 09 	call	0x129e	; 0x129e <fputc>
     f04:	e7 cf       	rjmp	.-50     	; 0xed4 <vfprintf+0x24>
     f06:	91 2c       	mov	r9, r1
     f08:	21 2c       	mov	r2, r1
     f0a:	31 2c       	mov	r3, r1
     f0c:	ff e1       	ldi	r31, 0x1F	; 31
     f0e:	f3 15       	cp	r31, r3
     f10:	d8 f0       	brcs	.+54     	; 0xf48 <vfprintf+0x98>
     f12:	8b 32       	cpi	r24, 0x2B	; 43
     f14:	79 f0       	breq	.+30     	; 0xf34 <vfprintf+0x84>
     f16:	38 f4       	brcc	.+14     	; 0xf26 <vfprintf+0x76>
     f18:	80 32       	cpi	r24, 0x20	; 32
     f1a:	79 f0       	breq	.+30     	; 0xf3a <vfprintf+0x8a>
     f1c:	83 32       	cpi	r24, 0x23	; 35
     f1e:	a1 f4       	brne	.+40     	; 0xf48 <vfprintf+0x98>
     f20:	23 2d       	mov	r18, r3
     f22:	20 61       	ori	r18, 0x10	; 16
     f24:	1d c0       	rjmp	.+58     	; 0xf60 <vfprintf+0xb0>
     f26:	8d 32       	cpi	r24, 0x2D	; 45
     f28:	61 f0       	breq	.+24     	; 0xf42 <vfprintf+0x92>
     f2a:	80 33       	cpi	r24, 0x30	; 48
     f2c:	69 f4       	brne	.+26     	; 0xf48 <vfprintf+0x98>
     f2e:	23 2d       	mov	r18, r3
     f30:	21 60       	ori	r18, 0x01	; 1
     f32:	16 c0       	rjmp	.+44     	; 0xf60 <vfprintf+0xb0>
     f34:	83 2d       	mov	r24, r3
     f36:	82 60       	ori	r24, 0x02	; 2
     f38:	38 2e       	mov	r3, r24
     f3a:	e3 2d       	mov	r30, r3
     f3c:	e4 60       	ori	r30, 0x04	; 4
     f3e:	3e 2e       	mov	r3, r30
     f40:	2a c0       	rjmp	.+84     	; 0xf96 <vfprintf+0xe6>
     f42:	f3 2d       	mov	r31, r3
     f44:	f8 60       	ori	r31, 0x08	; 8
     f46:	1d c0       	rjmp	.+58     	; 0xf82 <vfprintf+0xd2>
     f48:	37 fc       	sbrc	r3, 7
     f4a:	2d c0       	rjmp	.+90     	; 0xfa6 <vfprintf+0xf6>
     f4c:	20 ed       	ldi	r18, 0xD0	; 208
     f4e:	28 0f       	add	r18, r24
     f50:	2a 30       	cpi	r18, 0x0A	; 10
     f52:	40 f0       	brcs	.+16     	; 0xf64 <vfprintf+0xb4>
     f54:	8e 32       	cpi	r24, 0x2E	; 46
     f56:	b9 f4       	brne	.+46     	; 0xf86 <vfprintf+0xd6>
     f58:	36 fc       	sbrc	r3, 6
     f5a:	81 c1       	rjmp	.+770    	; 0x125e <vfprintf+0x3ae>
     f5c:	23 2d       	mov	r18, r3
     f5e:	20 64       	ori	r18, 0x40	; 64
     f60:	32 2e       	mov	r3, r18
     f62:	19 c0       	rjmp	.+50     	; 0xf96 <vfprintf+0xe6>
     f64:	36 fe       	sbrs	r3, 6
     f66:	06 c0       	rjmp	.+12     	; 0xf74 <vfprintf+0xc4>
     f68:	8a e0       	ldi	r24, 0x0A	; 10
     f6a:	98 9e       	mul	r9, r24
     f6c:	20 0d       	add	r18, r0
     f6e:	11 24       	eor	r1, r1
     f70:	92 2e       	mov	r9, r18
     f72:	11 c0       	rjmp	.+34     	; 0xf96 <vfprintf+0xe6>
     f74:	ea e0       	ldi	r30, 0x0A	; 10
     f76:	2e 9e       	mul	r2, r30
     f78:	20 0d       	add	r18, r0
     f7a:	11 24       	eor	r1, r1
     f7c:	22 2e       	mov	r2, r18
     f7e:	f3 2d       	mov	r31, r3
     f80:	f0 62       	ori	r31, 0x20	; 32
     f82:	3f 2e       	mov	r3, r31
     f84:	08 c0       	rjmp	.+16     	; 0xf96 <vfprintf+0xe6>
     f86:	8c 36       	cpi	r24, 0x6C	; 108
     f88:	21 f4       	brne	.+8      	; 0xf92 <vfprintf+0xe2>
     f8a:	83 2d       	mov	r24, r3
     f8c:	80 68       	ori	r24, 0x80	; 128
     f8e:	38 2e       	mov	r3, r24
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <vfprintf+0xe6>
     f92:	88 36       	cpi	r24, 0x68	; 104
     f94:	41 f4       	brne	.+16     	; 0xfa6 <vfprintf+0xf6>
     f96:	f7 01       	movw	r30, r14
     f98:	93 fd       	sbrc	r25, 3
     f9a:	85 91       	lpm	r24, Z+
     f9c:	93 ff       	sbrs	r25, 3
     f9e:	81 91       	ld	r24, Z+
     fa0:	7f 01       	movw	r14, r30
     fa2:	81 11       	cpse	r24, r1
     fa4:	b3 cf       	rjmp	.-154    	; 0xf0c <vfprintf+0x5c>
     fa6:	98 2f       	mov	r25, r24
     fa8:	9f 7d       	andi	r25, 0xDF	; 223
     faa:	95 54       	subi	r25, 0x45	; 69
     fac:	93 30       	cpi	r25, 0x03	; 3
     fae:	28 f4       	brcc	.+10     	; 0xfba <vfprintf+0x10a>
     fb0:	0c 5f       	subi	r16, 0xFC	; 252
     fb2:	1f 4f       	sbci	r17, 0xFF	; 255
     fb4:	9f e3       	ldi	r25, 0x3F	; 63
     fb6:	99 83       	std	Y+1, r25	; 0x01
     fb8:	0d c0       	rjmp	.+26     	; 0xfd4 <vfprintf+0x124>
     fba:	83 36       	cpi	r24, 0x63	; 99
     fbc:	31 f0       	breq	.+12     	; 0xfca <vfprintf+0x11a>
     fbe:	83 37       	cpi	r24, 0x73	; 115
     fc0:	71 f0       	breq	.+28     	; 0xfde <vfprintf+0x12e>
     fc2:	83 35       	cpi	r24, 0x53	; 83
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <vfprintf+0x118>
     fc6:	59 c0       	rjmp	.+178    	; 0x107a <vfprintf+0x1ca>
     fc8:	21 c0       	rjmp	.+66     	; 0x100c <vfprintf+0x15c>
     fca:	f8 01       	movw	r30, r16
     fcc:	80 81       	ld	r24, Z
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	0e 5f       	subi	r16, 0xFE	; 254
     fd2:	1f 4f       	sbci	r17, 0xFF	; 255
     fd4:	88 24       	eor	r8, r8
     fd6:	83 94       	inc	r8
     fd8:	91 2c       	mov	r9, r1
     fda:	53 01       	movw	r10, r6
     fdc:	13 c0       	rjmp	.+38     	; 0x1004 <vfprintf+0x154>
     fde:	28 01       	movw	r4, r16
     fe0:	f2 e0       	ldi	r31, 0x02	; 2
     fe2:	4f 0e       	add	r4, r31
     fe4:	51 1c       	adc	r5, r1
     fe6:	f8 01       	movw	r30, r16
     fe8:	a0 80       	ld	r10, Z
     fea:	b1 80       	ldd	r11, Z+1	; 0x01
     fec:	36 fe       	sbrs	r3, 6
     fee:	03 c0       	rjmp	.+6      	; 0xff6 <vfprintf+0x146>
     ff0:	69 2d       	mov	r22, r9
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <vfprintf+0x14a>
     ff6:	6f ef       	ldi	r22, 0xFF	; 255
     ff8:	7f ef       	ldi	r23, 0xFF	; 255
     ffa:	c5 01       	movw	r24, r10
     ffc:	0e 94 44 09 	call	0x1288	; 0x1288 <strnlen>
    1000:	4c 01       	movw	r8, r24
    1002:	82 01       	movw	r16, r4
    1004:	f3 2d       	mov	r31, r3
    1006:	ff 77       	andi	r31, 0x7F	; 127
    1008:	3f 2e       	mov	r3, r31
    100a:	16 c0       	rjmp	.+44     	; 0x1038 <vfprintf+0x188>
    100c:	28 01       	movw	r4, r16
    100e:	22 e0       	ldi	r18, 0x02	; 2
    1010:	42 0e       	add	r4, r18
    1012:	51 1c       	adc	r5, r1
    1014:	f8 01       	movw	r30, r16
    1016:	a0 80       	ld	r10, Z
    1018:	b1 80       	ldd	r11, Z+1	; 0x01
    101a:	36 fe       	sbrs	r3, 6
    101c:	03 c0       	rjmp	.+6      	; 0x1024 <vfprintf+0x174>
    101e:	69 2d       	mov	r22, r9
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <vfprintf+0x178>
    1024:	6f ef       	ldi	r22, 0xFF	; 255
    1026:	7f ef       	ldi	r23, 0xFF	; 255
    1028:	c5 01       	movw	r24, r10
    102a:	0e 94 39 09 	call	0x1272	; 0x1272 <strnlen_P>
    102e:	4c 01       	movw	r8, r24
    1030:	f3 2d       	mov	r31, r3
    1032:	f0 68       	ori	r31, 0x80	; 128
    1034:	3f 2e       	mov	r3, r31
    1036:	82 01       	movw	r16, r4
    1038:	33 fc       	sbrc	r3, 3
    103a:	1b c0       	rjmp	.+54     	; 0x1072 <vfprintf+0x1c2>
    103c:	82 2d       	mov	r24, r2
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	88 16       	cp	r8, r24
    1042:	99 06       	cpc	r9, r25
    1044:	b0 f4       	brcc	.+44     	; 0x1072 <vfprintf+0x1c2>
    1046:	b6 01       	movw	r22, r12
    1048:	80 e2       	ldi	r24, 0x20	; 32
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 4f 09 	call	0x129e	; 0x129e <fputc>
    1050:	2a 94       	dec	r2
    1052:	f4 cf       	rjmp	.-24     	; 0x103c <vfprintf+0x18c>
    1054:	f5 01       	movw	r30, r10
    1056:	37 fc       	sbrc	r3, 7
    1058:	85 91       	lpm	r24, Z+
    105a:	37 fe       	sbrs	r3, 7
    105c:	81 91       	ld	r24, Z+
    105e:	5f 01       	movw	r10, r30
    1060:	b6 01       	movw	r22, r12
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 4f 09 	call	0x129e	; 0x129e <fputc>
    1068:	21 10       	cpse	r2, r1
    106a:	2a 94       	dec	r2
    106c:	21 e0       	ldi	r18, 0x01	; 1
    106e:	82 1a       	sub	r8, r18
    1070:	91 08       	sbc	r9, r1
    1072:	81 14       	cp	r8, r1
    1074:	91 04       	cpc	r9, r1
    1076:	71 f7       	brne	.-36     	; 0x1054 <vfprintf+0x1a4>
    1078:	e8 c0       	rjmp	.+464    	; 0x124a <vfprintf+0x39a>
    107a:	84 36       	cpi	r24, 0x64	; 100
    107c:	11 f0       	breq	.+4      	; 0x1082 <vfprintf+0x1d2>
    107e:	89 36       	cpi	r24, 0x69	; 105
    1080:	41 f5       	brne	.+80     	; 0x10d2 <vfprintf+0x222>
    1082:	f8 01       	movw	r30, r16
    1084:	37 fe       	sbrs	r3, 7
    1086:	07 c0       	rjmp	.+14     	; 0x1096 <vfprintf+0x1e6>
    1088:	60 81       	ld	r22, Z
    108a:	71 81       	ldd	r23, Z+1	; 0x01
    108c:	82 81       	ldd	r24, Z+2	; 0x02
    108e:	93 81       	ldd	r25, Z+3	; 0x03
    1090:	0c 5f       	subi	r16, 0xFC	; 252
    1092:	1f 4f       	sbci	r17, 0xFF	; 255
    1094:	08 c0       	rjmp	.+16     	; 0x10a6 <vfprintf+0x1f6>
    1096:	60 81       	ld	r22, Z
    1098:	71 81       	ldd	r23, Z+1	; 0x01
    109a:	07 2e       	mov	r0, r23
    109c:	00 0c       	add	r0, r0
    109e:	88 0b       	sbc	r24, r24
    10a0:	99 0b       	sbc	r25, r25
    10a2:	0e 5f       	subi	r16, 0xFE	; 254
    10a4:	1f 4f       	sbci	r17, 0xFF	; 255
    10a6:	f3 2d       	mov	r31, r3
    10a8:	ff 76       	andi	r31, 0x6F	; 111
    10aa:	3f 2e       	mov	r3, r31
    10ac:	97 ff       	sbrs	r25, 7
    10ae:	09 c0       	rjmp	.+18     	; 0x10c2 <vfprintf+0x212>
    10b0:	90 95       	com	r25
    10b2:	80 95       	com	r24
    10b4:	70 95       	com	r23
    10b6:	61 95       	neg	r22
    10b8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ba:	8f 4f       	sbci	r24, 0xFF	; 255
    10bc:	9f 4f       	sbci	r25, 0xFF	; 255
    10be:	f0 68       	ori	r31, 0x80	; 128
    10c0:	3f 2e       	mov	r3, r31
    10c2:	2a e0       	ldi	r18, 0x0A	; 10
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	a3 01       	movw	r20, r6
    10c8:	0e 94 8b 09 	call	0x1316	; 0x1316 <__ultoa_invert>
    10cc:	88 2e       	mov	r8, r24
    10ce:	86 18       	sub	r8, r6
    10d0:	45 c0       	rjmp	.+138    	; 0x115c <vfprintf+0x2ac>
    10d2:	85 37       	cpi	r24, 0x75	; 117
    10d4:	31 f4       	brne	.+12     	; 0x10e2 <vfprintf+0x232>
    10d6:	23 2d       	mov	r18, r3
    10d8:	2f 7e       	andi	r18, 0xEF	; 239
    10da:	b2 2e       	mov	r11, r18
    10dc:	2a e0       	ldi	r18, 0x0A	; 10
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	25 c0       	rjmp	.+74     	; 0x112c <vfprintf+0x27c>
    10e2:	93 2d       	mov	r25, r3
    10e4:	99 7f       	andi	r25, 0xF9	; 249
    10e6:	b9 2e       	mov	r11, r25
    10e8:	8f 36       	cpi	r24, 0x6F	; 111
    10ea:	c1 f0       	breq	.+48     	; 0x111c <vfprintf+0x26c>
    10ec:	18 f4       	brcc	.+6      	; 0x10f4 <vfprintf+0x244>
    10ee:	88 35       	cpi	r24, 0x58	; 88
    10f0:	79 f0       	breq	.+30     	; 0x1110 <vfprintf+0x260>
    10f2:	b5 c0       	rjmp	.+362    	; 0x125e <vfprintf+0x3ae>
    10f4:	80 37       	cpi	r24, 0x70	; 112
    10f6:	19 f0       	breq	.+6      	; 0x10fe <vfprintf+0x24e>
    10f8:	88 37       	cpi	r24, 0x78	; 120
    10fa:	21 f0       	breq	.+8      	; 0x1104 <vfprintf+0x254>
    10fc:	b0 c0       	rjmp	.+352    	; 0x125e <vfprintf+0x3ae>
    10fe:	e9 2f       	mov	r30, r25
    1100:	e0 61       	ori	r30, 0x10	; 16
    1102:	be 2e       	mov	r11, r30
    1104:	b4 fe       	sbrs	r11, 4
    1106:	0d c0       	rjmp	.+26     	; 0x1122 <vfprintf+0x272>
    1108:	fb 2d       	mov	r31, r11
    110a:	f4 60       	ori	r31, 0x04	; 4
    110c:	bf 2e       	mov	r11, r31
    110e:	09 c0       	rjmp	.+18     	; 0x1122 <vfprintf+0x272>
    1110:	34 fe       	sbrs	r3, 4
    1112:	0a c0       	rjmp	.+20     	; 0x1128 <vfprintf+0x278>
    1114:	29 2f       	mov	r18, r25
    1116:	26 60       	ori	r18, 0x06	; 6
    1118:	b2 2e       	mov	r11, r18
    111a:	06 c0       	rjmp	.+12     	; 0x1128 <vfprintf+0x278>
    111c:	28 e0       	ldi	r18, 0x08	; 8
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	05 c0       	rjmp	.+10     	; 0x112c <vfprintf+0x27c>
    1122:	20 e1       	ldi	r18, 0x10	; 16
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	02 c0       	rjmp	.+4      	; 0x112c <vfprintf+0x27c>
    1128:	20 e1       	ldi	r18, 0x10	; 16
    112a:	32 e0       	ldi	r19, 0x02	; 2
    112c:	f8 01       	movw	r30, r16
    112e:	b7 fe       	sbrs	r11, 7
    1130:	07 c0       	rjmp	.+14     	; 0x1140 <vfprintf+0x290>
    1132:	60 81       	ld	r22, Z
    1134:	71 81       	ldd	r23, Z+1	; 0x01
    1136:	82 81       	ldd	r24, Z+2	; 0x02
    1138:	93 81       	ldd	r25, Z+3	; 0x03
    113a:	0c 5f       	subi	r16, 0xFC	; 252
    113c:	1f 4f       	sbci	r17, 0xFF	; 255
    113e:	06 c0       	rjmp	.+12     	; 0x114c <vfprintf+0x29c>
    1140:	60 81       	ld	r22, Z
    1142:	71 81       	ldd	r23, Z+1	; 0x01
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 5f       	subi	r16, 0xFE	; 254
    114a:	1f 4f       	sbci	r17, 0xFF	; 255
    114c:	a3 01       	movw	r20, r6
    114e:	0e 94 8b 09 	call	0x1316	; 0x1316 <__ultoa_invert>
    1152:	88 2e       	mov	r8, r24
    1154:	86 18       	sub	r8, r6
    1156:	fb 2d       	mov	r31, r11
    1158:	ff 77       	andi	r31, 0x7F	; 127
    115a:	3f 2e       	mov	r3, r31
    115c:	36 fe       	sbrs	r3, 6
    115e:	0d c0       	rjmp	.+26     	; 0x117a <vfprintf+0x2ca>
    1160:	23 2d       	mov	r18, r3
    1162:	2e 7f       	andi	r18, 0xFE	; 254
    1164:	a2 2e       	mov	r10, r18
    1166:	89 14       	cp	r8, r9
    1168:	58 f4       	brcc	.+22     	; 0x1180 <vfprintf+0x2d0>
    116a:	34 fe       	sbrs	r3, 4
    116c:	0b c0       	rjmp	.+22     	; 0x1184 <vfprintf+0x2d4>
    116e:	32 fc       	sbrc	r3, 2
    1170:	09 c0       	rjmp	.+18     	; 0x1184 <vfprintf+0x2d4>
    1172:	83 2d       	mov	r24, r3
    1174:	8e 7e       	andi	r24, 0xEE	; 238
    1176:	a8 2e       	mov	r10, r24
    1178:	05 c0       	rjmp	.+10     	; 0x1184 <vfprintf+0x2d4>
    117a:	b8 2c       	mov	r11, r8
    117c:	a3 2c       	mov	r10, r3
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <vfprintf+0x2d6>
    1180:	b8 2c       	mov	r11, r8
    1182:	01 c0       	rjmp	.+2      	; 0x1186 <vfprintf+0x2d6>
    1184:	b9 2c       	mov	r11, r9
    1186:	a4 fe       	sbrs	r10, 4
    1188:	0f c0       	rjmp	.+30     	; 0x11a8 <vfprintf+0x2f8>
    118a:	fe 01       	movw	r30, r28
    118c:	e8 0d       	add	r30, r8
    118e:	f1 1d       	adc	r31, r1
    1190:	80 81       	ld	r24, Z
    1192:	80 33       	cpi	r24, 0x30	; 48
    1194:	21 f4       	brne	.+8      	; 0x119e <vfprintf+0x2ee>
    1196:	9a 2d       	mov	r25, r10
    1198:	99 7e       	andi	r25, 0xE9	; 233
    119a:	a9 2e       	mov	r10, r25
    119c:	09 c0       	rjmp	.+18     	; 0x11b0 <vfprintf+0x300>
    119e:	a2 fe       	sbrs	r10, 2
    11a0:	06 c0       	rjmp	.+12     	; 0x11ae <vfprintf+0x2fe>
    11a2:	b3 94       	inc	r11
    11a4:	b3 94       	inc	r11
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <vfprintf+0x300>
    11a8:	8a 2d       	mov	r24, r10
    11aa:	86 78       	andi	r24, 0x86	; 134
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <vfprintf+0x300>
    11ae:	b3 94       	inc	r11
    11b0:	a3 fc       	sbrc	r10, 3
    11b2:	11 c0       	rjmp	.+34     	; 0x11d6 <vfprintf+0x326>
    11b4:	a0 fe       	sbrs	r10, 0
    11b6:	06 c0       	rjmp	.+12     	; 0x11c4 <vfprintf+0x314>
    11b8:	b2 14       	cp	r11, r2
    11ba:	88 f4       	brcc	.+34     	; 0x11de <vfprintf+0x32e>
    11bc:	28 0c       	add	r2, r8
    11be:	92 2c       	mov	r9, r2
    11c0:	9b 18       	sub	r9, r11
    11c2:	0e c0       	rjmp	.+28     	; 0x11e0 <vfprintf+0x330>
    11c4:	b2 14       	cp	r11, r2
    11c6:	60 f4       	brcc	.+24     	; 0x11e0 <vfprintf+0x330>
    11c8:	b6 01       	movw	r22, r12
    11ca:	80 e2       	ldi	r24, 0x20	; 32
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 4f 09 	call	0x129e	; 0x129e <fputc>
    11d2:	b3 94       	inc	r11
    11d4:	f7 cf       	rjmp	.-18     	; 0x11c4 <vfprintf+0x314>
    11d6:	b2 14       	cp	r11, r2
    11d8:	18 f4       	brcc	.+6      	; 0x11e0 <vfprintf+0x330>
    11da:	2b 18       	sub	r2, r11
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <vfprintf+0x332>
    11de:	98 2c       	mov	r9, r8
    11e0:	21 2c       	mov	r2, r1
    11e2:	a4 fe       	sbrs	r10, 4
    11e4:	10 c0       	rjmp	.+32     	; 0x1206 <vfprintf+0x356>
    11e6:	b6 01       	movw	r22, r12
    11e8:	80 e3       	ldi	r24, 0x30	; 48
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 94 4f 09 	call	0x129e	; 0x129e <fputc>
    11f0:	a2 fe       	sbrs	r10, 2
    11f2:	17 c0       	rjmp	.+46     	; 0x1222 <vfprintf+0x372>
    11f4:	a1 fc       	sbrc	r10, 1
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <vfprintf+0x34e>
    11f8:	88 e7       	ldi	r24, 0x78	; 120
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <vfprintf+0x352>
    11fe:	88 e5       	ldi	r24, 0x58	; 88
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	b6 01       	movw	r22, r12
    1204:	0c c0       	rjmp	.+24     	; 0x121e <vfprintf+0x36e>
    1206:	8a 2d       	mov	r24, r10
    1208:	86 78       	andi	r24, 0x86	; 134
    120a:	59 f0       	breq	.+22     	; 0x1222 <vfprintf+0x372>
    120c:	a1 fe       	sbrs	r10, 1
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <vfprintf+0x364>
    1210:	8b e2       	ldi	r24, 0x2B	; 43
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <vfprintf+0x366>
    1214:	80 e2       	ldi	r24, 0x20	; 32
    1216:	a7 fc       	sbrc	r10, 7
    1218:	8d e2       	ldi	r24, 0x2D	; 45
    121a:	b6 01       	movw	r22, r12
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 4f 09 	call	0x129e	; 0x129e <fputc>
    1222:	89 14       	cp	r8, r9
    1224:	38 f4       	brcc	.+14     	; 0x1234 <vfprintf+0x384>
    1226:	b6 01       	movw	r22, r12
    1228:	80 e3       	ldi	r24, 0x30	; 48
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 94 4f 09 	call	0x129e	; 0x129e <fputc>
    1230:	9a 94       	dec	r9
    1232:	f7 cf       	rjmp	.-18     	; 0x1222 <vfprintf+0x372>
    1234:	8a 94       	dec	r8
    1236:	f3 01       	movw	r30, r6
    1238:	e8 0d       	add	r30, r8
    123a:	f1 1d       	adc	r31, r1
    123c:	80 81       	ld	r24, Z
    123e:	b6 01       	movw	r22, r12
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 4f 09 	call	0x129e	; 0x129e <fputc>
    1246:	81 10       	cpse	r8, r1
    1248:	f5 cf       	rjmp	.-22     	; 0x1234 <vfprintf+0x384>
    124a:	22 20       	and	r2, r2
    124c:	09 f4       	brne	.+2      	; 0x1250 <vfprintf+0x3a0>
    124e:	42 ce       	rjmp	.-892    	; 0xed4 <vfprintf+0x24>
    1250:	b6 01       	movw	r22, r12
    1252:	80 e2       	ldi	r24, 0x20	; 32
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 4f 09 	call	0x129e	; 0x129e <fputc>
    125a:	2a 94       	dec	r2
    125c:	f6 cf       	rjmp	.-20     	; 0x124a <vfprintf+0x39a>
    125e:	f6 01       	movw	r30, r12
    1260:	86 81       	ldd	r24, Z+6	; 0x06
    1262:	97 81       	ldd	r25, Z+7	; 0x07
    1264:	02 c0       	rjmp	.+4      	; 0x126a <vfprintf+0x3ba>
    1266:	8f ef       	ldi	r24, 0xFF	; 255
    1268:	9f ef       	ldi	r25, 0xFF	; 255
    126a:	2b 96       	adiw	r28, 0x0b	; 11
    126c:	e2 e1       	ldi	r30, 0x12	; 18
    126e:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__epilogue_restores__>

00001272 <strnlen_P>:
    1272:	fc 01       	movw	r30, r24
    1274:	05 90       	lpm	r0, Z+
    1276:	61 50       	subi	r22, 0x01	; 1
    1278:	70 40       	sbci	r23, 0x00	; 0
    127a:	01 10       	cpse	r0, r1
    127c:	d8 f7       	brcc	.-10     	; 0x1274 <strnlen_P+0x2>
    127e:	80 95       	com	r24
    1280:	90 95       	com	r25
    1282:	8e 0f       	add	r24, r30
    1284:	9f 1f       	adc	r25, r31
    1286:	08 95       	ret

00001288 <strnlen>:
    1288:	fc 01       	movw	r30, r24
    128a:	61 50       	subi	r22, 0x01	; 1
    128c:	70 40       	sbci	r23, 0x00	; 0
    128e:	01 90       	ld	r0, Z+
    1290:	01 10       	cpse	r0, r1
    1292:	d8 f7       	brcc	.-10     	; 0x128a <strnlen+0x2>
    1294:	80 95       	com	r24
    1296:	90 95       	com	r25
    1298:	8e 0f       	add	r24, r30
    129a:	9f 1f       	adc	r25, r31
    129c:	08 95       	ret

0000129e <fputc>:
    129e:	0f 93       	push	r16
    12a0:	1f 93       	push	r17
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	fb 01       	movw	r30, r22
    12a8:	23 81       	ldd	r18, Z+3	; 0x03
    12aa:	21 fd       	sbrc	r18, 1
    12ac:	03 c0       	rjmp	.+6      	; 0x12b4 <fputc+0x16>
    12ae:	8f ef       	ldi	r24, 0xFF	; 255
    12b0:	9f ef       	ldi	r25, 0xFF	; 255
    12b2:	2c c0       	rjmp	.+88     	; 0x130c <fputc+0x6e>
    12b4:	22 ff       	sbrs	r18, 2
    12b6:	16 c0       	rjmp	.+44     	; 0x12e4 <fputc+0x46>
    12b8:	46 81       	ldd	r20, Z+6	; 0x06
    12ba:	57 81       	ldd	r21, Z+7	; 0x07
    12bc:	24 81       	ldd	r18, Z+4	; 0x04
    12be:	35 81       	ldd	r19, Z+5	; 0x05
    12c0:	42 17       	cp	r20, r18
    12c2:	53 07       	cpc	r21, r19
    12c4:	44 f4       	brge	.+16     	; 0x12d6 <fputc+0x38>
    12c6:	a0 81       	ld	r26, Z
    12c8:	b1 81       	ldd	r27, Z+1	; 0x01
    12ca:	9d 01       	movw	r18, r26
    12cc:	2f 5f       	subi	r18, 0xFF	; 255
    12ce:	3f 4f       	sbci	r19, 0xFF	; 255
    12d0:	31 83       	std	Z+1, r19	; 0x01
    12d2:	20 83       	st	Z, r18
    12d4:	8c 93       	st	X, r24
    12d6:	26 81       	ldd	r18, Z+6	; 0x06
    12d8:	37 81       	ldd	r19, Z+7	; 0x07
    12da:	2f 5f       	subi	r18, 0xFF	; 255
    12dc:	3f 4f       	sbci	r19, 0xFF	; 255
    12de:	37 83       	std	Z+7, r19	; 0x07
    12e0:	26 83       	std	Z+6, r18	; 0x06
    12e2:	14 c0       	rjmp	.+40     	; 0x130c <fputc+0x6e>
    12e4:	8b 01       	movw	r16, r22
    12e6:	ec 01       	movw	r28, r24
    12e8:	fb 01       	movw	r30, r22
    12ea:	00 84       	ldd	r0, Z+8	; 0x08
    12ec:	f1 85       	ldd	r31, Z+9	; 0x09
    12ee:	e0 2d       	mov	r30, r0
    12f0:	09 95       	icall
    12f2:	89 2b       	or	r24, r25
    12f4:	e1 f6       	brne	.-72     	; 0x12ae <fputc+0x10>
    12f6:	d8 01       	movw	r26, r16
    12f8:	16 96       	adiw	r26, 0x06	; 6
    12fa:	8d 91       	ld	r24, X+
    12fc:	9c 91       	ld	r25, X
    12fe:	17 97       	sbiw	r26, 0x07	; 7
    1300:	01 96       	adiw	r24, 0x01	; 1
    1302:	17 96       	adiw	r26, 0x07	; 7
    1304:	9c 93       	st	X, r25
    1306:	8e 93       	st	-X, r24
    1308:	16 97       	sbiw	r26, 0x06	; 6
    130a:	ce 01       	movw	r24, r28
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	1f 91       	pop	r17
    1312:	0f 91       	pop	r16
    1314:	08 95       	ret

00001316 <__ultoa_invert>:
    1316:	fa 01       	movw	r30, r20
    1318:	aa 27       	eor	r26, r26
    131a:	28 30       	cpi	r18, 0x08	; 8
    131c:	51 f1       	breq	.+84     	; 0x1372 <__ultoa_invert+0x5c>
    131e:	20 31       	cpi	r18, 0x10	; 16
    1320:	81 f1       	breq	.+96     	; 0x1382 <__ultoa_invert+0x6c>
    1322:	e8 94       	clt
    1324:	6f 93       	push	r22
    1326:	6e 7f       	andi	r22, 0xFE	; 254
    1328:	6e 5f       	subi	r22, 0xFE	; 254
    132a:	7f 4f       	sbci	r23, 0xFF	; 255
    132c:	8f 4f       	sbci	r24, 0xFF	; 255
    132e:	9f 4f       	sbci	r25, 0xFF	; 255
    1330:	af 4f       	sbci	r26, 0xFF	; 255
    1332:	b1 e0       	ldi	r27, 0x01	; 1
    1334:	3e d0       	rcall	.+124    	; 0x13b2 <__ultoa_invert+0x9c>
    1336:	b4 e0       	ldi	r27, 0x04	; 4
    1338:	3c d0       	rcall	.+120    	; 0x13b2 <__ultoa_invert+0x9c>
    133a:	67 0f       	add	r22, r23
    133c:	78 1f       	adc	r23, r24
    133e:	89 1f       	adc	r24, r25
    1340:	9a 1f       	adc	r25, r26
    1342:	a1 1d       	adc	r26, r1
    1344:	68 0f       	add	r22, r24
    1346:	79 1f       	adc	r23, r25
    1348:	8a 1f       	adc	r24, r26
    134a:	91 1d       	adc	r25, r1
    134c:	a1 1d       	adc	r26, r1
    134e:	6a 0f       	add	r22, r26
    1350:	71 1d       	adc	r23, r1
    1352:	81 1d       	adc	r24, r1
    1354:	91 1d       	adc	r25, r1
    1356:	a1 1d       	adc	r26, r1
    1358:	20 d0       	rcall	.+64     	; 0x139a <__ultoa_invert+0x84>
    135a:	09 f4       	brne	.+2      	; 0x135e <__ultoa_invert+0x48>
    135c:	68 94       	set
    135e:	3f 91       	pop	r19
    1360:	2a e0       	ldi	r18, 0x0A	; 10
    1362:	26 9f       	mul	r18, r22
    1364:	11 24       	eor	r1, r1
    1366:	30 19       	sub	r19, r0
    1368:	30 5d       	subi	r19, 0xD0	; 208
    136a:	31 93       	st	Z+, r19
    136c:	de f6       	brtc	.-74     	; 0x1324 <__ultoa_invert+0xe>
    136e:	cf 01       	movw	r24, r30
    1370:	08 95       	ret
    1372:	46 2f       	mov	r20, r22
    1374:	47 70       	andi	r20, 0x07	; 7
    1376:	40 5d       	subi	r20, 0xD0	; 208
    1378:	41 93       	st	Z+, r20
    137a:	b3 e0       	ldi	r27, 0x03	; 3
    137c:	0f d0       	rcall	.+30     	; 0x139c <__ultoa_invert+0x86>
    137e:	c9 f7       	brne	.-14     	; 0x1372 <__ultoa_invert+0x5c>
    1380:	f6 cf       	rjmp	.-20     	; 0x136e <__ultoa_invert+0x58>
    1382:	46 2f       	mov	r20, r22
    1384:	4f 70       	andi	r20, 0x0F	; 15
    1386:	40 5d       	subi	r20, 0xD0	; 208
    1388:	4a 33       	cpi	r20, 0x3A	; 58
    138a:	18 f0       	brcs	.+6      	; 0x1392 <__ultoa_invert+0x7c>
    138c:	49 5d       	subi	r20, 0xD9	; 217
    138e:	31 fd       	sbrc	r19, 1
    1390:	40 52       	subi	r20, 0x20	; 32
    1392:	41 93       	st	Z+, r20
    1394:	02 d0       	rcall	.+4      	; 0x139a <__ultoa_invert+0x84>
    1396:	a9 f7       	brne	.-22     	; 0x1382 <__ultoa_invert+0x6c>
    1398:	ea cf       	rjmp	.-44     	; 0x136e <__ultoa_invert+0x58>
    139a:	b4 e0       	ldi	r27, 0x04	; 4
    139c:	a6 95       	lsr	r26
    139e:	97 95       	ror	r25
    13a0:	87 95       	ror	r24
    13a2:	77 95       	ror	r23
    13a4:	67 95       	ror	r22
    13a6:	ba 95       	dec	r27
    13a8:	c9 f7       	brne	.-14     	; 0x139c <__ultoa_invert+0x86>
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	61 05       	cpc	r22, r1
    13ae:	71 05       	cpc	r23, r1
    13b0:	08 95       	ret
    13b2:	9b 01       	movw	r18, r22
    13b4:	ac 01       	movw	r20, r24
    13b6:	0a 2e       	mov	r0, r26
    13b8:	06 94       	lsr	r0
    13ba:	57 95       	ror	r21
    13bc:	47 95       	ror	r20
    13be:	37 95       	ror	r19
    13c0:	27 95       	ror	r18
    13c2:	ba 95       	dec	r27
    13c4:	c9 f7       	brne	.-14     	; 0x13b8 <__ultoa_invert+0xa2>
    13c6:	62 0f       	add	r22, r18
    13c8:	73 1f       	adc	r23, r19
    13ca:	84 1f       	adc	r24, r20
    13cc:	95 1f       	adc	r25, r21
    13ce:	a0 1d       	adc	r26, r0
    13d0:	08 95       	ret

000013d2 <__prologue_saves__>:
    13d2:	2f 92       	push	r2
    13d4:	3f 92       	push	r3
    13d6:	4f 92       	push	r4
    13d8:	5f 92       	push	r5
    13da:	6f 92       	push	r6
    13dc:	7f 92       	push	r7
    13de:	8f 92       	push	r8
    13e0:	9f 92       	push	r9
    13e2:	af 92       	push	r10
    13e4:	bf 92       	push	r11
    13e6:	cf 92       	push	r12
    13e8:	df 92       	push	r13
    13ea:	ef 92       	push	r14
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	ca 1b       	sub	r28, r26
    13fc:	db 0b       	sbc	r29, r27
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
    1402:	de bf       	out	0x3e, r29	; 62
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	cd bf       	out	0x3d, r28	; 61
    1408:	09 94       	ijmp

0000140a <__epilogue_restores__>:
    140a:	2a 88       	ldd	r2, Y+18	; 0x12
    140c:	39 88       	ldd	r3, Y+17	; 0x11
    140e:	48 88       	ldd	r4, Y+16	; 0x10
    1410:	5f 84       	ldd	r5, Y+15	; 0x0f
    1412:	6e 84       	ldd	r6, Y+14	; 0x0e
    1414:	7d 84       	ldd	r7, Y+13	; 0x0d
    1416:	8c 84       	ldd	r8, Y+12	; 0x0c
    1418:	9b 84       	ldd	r9, Y+11	; 0x0b
    141a:	aa 84       	ldd	r10, Y+10	; 0x0a
    141c:	b9 84       	ldd	r11, Y+9	; 0x09
    141e:	c8 84       	ldd	r12, Y+8	; 0x08
    1420:	df 80       	ldd	r13, Y+7	; 0x07
    1422:	ee 80       	ldd	r14, Y+6	; 0x06
    1424:	fd 80       	ldd	r15, Y+5	; 0x05
    1426:	0c 81       	ldd	r16, Y+4	; 0x04
    1428:	1b 81       	ldd	r17, Y+3	; 0x03
    142a:	aa 81       	ldd	r26, Y+2	; 0x02
    142c:	b9 81       	ldd	r27, Y+1	; 0x01
    142e:	ce 0f       	add	r28, r30
    1430:	d1 1d       	adc	r29, r1
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	ed 01       	movw	r28, r26
    143e:	08 95       	ret

00001440 <_exit>:
    1440:	f8 94       	cli

00001442 <__stop_program>:
    1442:	ff cf       	rjmp	.-2      	; 0x1442 <__stop_program>
